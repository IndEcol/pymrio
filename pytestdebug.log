versions pytest-6.1.2, py-1.9.0, python-3.8.3.final.0
cwd=/home/konstans/proj/pymrio
args=('--debug',)

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
    pytest_plugin_registered [hook]
        plugin: <Session pymrio exitstatus=None testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f9b8db9e700>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f9b8db9e250>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f9b8db9e0a0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f9b8dbaf460>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/konstans/.local/lib/python3.8/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_black' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pytest_black.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_pep8' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pytest_pep8.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=6 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=7 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=9 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=4 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f9b8db9e700>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f9b8db9e250>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f9b8db9e0a0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f9b8dbaf460>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f9b8dbd6c70>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f9b8db54cd0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/mark/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from '/home/konstans/.local/lib/python3.8/site-packages/pytest_cov/plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_black' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pytest_black.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_pep8' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pytest_pep8.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=6 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=7 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name="<_io.FileIO name=9 mode='rb+' closefd=True>" mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=4 _state='started' tmpfile=<_io.TextIOWrapper name='/dev/null' mode='r' encoding='UTF-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x7f9b8db9e700>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x7f9b8db9e250>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x7f9b8db9e0a0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x7f9b8dbaf460>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x7f9b8dbd6c70>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x7f9b8db54cd0>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x7f9b8dae6490>
          manager: <_pytest.config.PytestPluginManager object at 0x7f9b8ef3eee0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          startdir: /home/konstans/proj/pymrio
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      early skip of rewriting module: email.errors [assertion]
      early skip of rewriting module: email._policybase [assertion]
      early skip of rewriting module: email.header [assertion]
      early skip of rewriting module: email.quoprimime [assertion]
      early skip of rewriting module: email.base64mime [assertion]
      early skip of rewriting module: base64 [assertion]
      early skip of rewriting module: email.charset [assertion]
      early skip of rewriting module: email.encoders [assertion]
      early skip of rewriting module: quopri [assertion]
      early skip of rewriting module: email.utils [assertion]
      early skip of rewriting module: email._parseaddr [assertion]
      early skip of rewriting module: calendar [assertion]
      early skip of rewriting module: email.message [assertion]
      early skip of rewriting module: uu [assertion]
      early skip of rewriting module: email._encoded_words [assertion]
      early skip of rewriting module: email.iterators [assertion]
      finish pytest_report_header --> [['rootdir: /home/konstans/proj/pymrio, configfile: pytest.ini', 'plugins: cov-2.10.1, black-0.3.11, pep8-1.0.6'], ['using: pytest-6.1.2 pylib-1.9.0', 'setuptools registered plugins:', '  pytest-cov-2.10.1 at /home/konstans/.local/lib/python3.8/site-packages/pytest_cov/plugin.py', '  pytest-black-0.3.11 at /home/konstans/bin/anaconda3/lib/python3.8/site-packages/pytest_black.py', '  pytest-pep8-1.0.6 at /home/konstans/bin/anaconda3/lib/python3.8/site-packages/pytest_pep8.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['/home/konstans/proj/pymrio'] [collection]
        pytest_collectstart [hook]
            collector: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('/home/konstans/proj/pymrio'), []) [collection]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.coverage
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/.coverage
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            early skip of rewriting module: py._code [assertion]
            early skip of rewriting module: py._code.code [assertion]
            early skip of rewriting module: repr [assertion]
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.coveragerc
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/.coveragerc
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.gitignore
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/.gitignore
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.notebook_test_sanitize.cfg
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/.notebook_test_sanitize.cfg
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.tags
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/.tags
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.travis.yml
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/.travis.yml
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/CHANGELOG.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/CHANGELOG.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/CONTRIBUTING.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/CONTRIBUTING.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/LICENSE
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/LICENSE
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/README.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/README.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pytest.ini
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pytest.ini
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pytestdebug.log
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pytestdebug.log
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/requirements.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/requirements.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/setup.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/setup.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.git
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.pytest_cache
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/.vscode
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/dist
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/Makefile
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/Makefile
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/make.bat
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/make.bat
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/rtd-requirements.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/rtd-requirements.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/_static
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/build
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_references.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_references.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/changelog.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/changelog.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/conf.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/conf.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/development.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/development.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/handling.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/handling.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/index.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/index.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/installation.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/installation.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/intro.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/intro.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/math.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/math.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/terminology.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/terminology.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/_static
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.calc_system.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.calc_system.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.diag_stressor.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.diag_stressor.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.get_row_data.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.get_row_data.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.get_rows.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.get_rows.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.plot_account.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.Extension.plot_account.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.aggregate.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.aggregate.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.calc_all.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.calc_all.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.calc_system.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.calc_system.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.copy.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.copy.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_DataFrame.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_DataFrame.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_Y_categories.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_Y_categories.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_extensions.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_extensions.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_index.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_index.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_regions.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_regions.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_sectors.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.get_sectors.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.remove_extension.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.remove_extension.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.rename_Y_categories.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.rename_Y_categories.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.rename_regions.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.rename_regions.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.rename_sectors.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.rename_sectors.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.report_accounts.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.report_accounts.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.reset_to_coefficients.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.reset_to_coefficients.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.reset_to_flows.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.reset_to_flows.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.save.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.save.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.save_all.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.save_all.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.set_index.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.IOSystem.set_index.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.file_io_history.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.file_io_history.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.history.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.history.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.modification_history.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.modification_history.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.note.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.note.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.note_history.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.note_history.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.save.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.MRIOMetaData.save.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.archive.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.archive.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.build_agg_vec.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.build_agg_vec.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_A.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_A.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_F.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_F.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_L.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_L.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_M.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_M.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_S.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_S.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_Z.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_Z.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_accounts.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_accounts.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_e.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_e.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_x.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.calc_x.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.concate_extension.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.concate_extension.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.download_oecd.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.download_oecd.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.download_wiod2013.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.download_wiod2013.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.generic_exiobase12_parser.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.generic_exiobase12_parser.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.load.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.load.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.load_all.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.load_all.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.load_test.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.load_test.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_eora26.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_eora26.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exio12_ext.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exio12_ext.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exiobase1.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exiobase1.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exiobase2.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exiobase2.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exiobase3.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_exiobase3.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_oecd.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_oecd.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_wiod.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/api_doc/pymrio.parse_wiod.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/advanced_group_stressors.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/advanced_group_stressors.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/aggregation_examples.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/aggregation_examples.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/autodownload.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/autodownload.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/buildflowmatrix.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/buildflowmatrix.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/load_save_export.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/load_save_export.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/metadata.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/metadata.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/pymrio_directly_assign_attributes.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/pymrio_directly_assign_attributes.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_eora26.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_eora26.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_exiobase.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_exiobase.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_oecd_icio.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_oecd_icio.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_wiod.ipynb
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/working_with_wiod.ipynb
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/doc/source/notebooks/.ipynb_checkpoints
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/coverage_html.js
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/coverage_html.js
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/index.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/index.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.ba-throttle-debounce.min.js
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.ba-throttle-debounce.min.js
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.hotkeys.js
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.hotkeys.js
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.isonscreen.js
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.isonscreen.js
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.min.js
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.min.js
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.tablesorter.min.js
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/jquery.tablesorter.min.js
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/keybd_closed.png
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/keybd_closed.png
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/keybd_open.png
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/keybd_open.png
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio___init___py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio___init___py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core___init___py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core___init___py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core_constants_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core_constants_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core_fileio_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core_fileio_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core_mriosystem_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_core_mriosystem_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_aggregation_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_aggregation_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_core_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_core_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_integration_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_integration_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_math_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_math_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_outputs_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_outputs_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_parsers_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_parsers_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_util_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tests_test_util_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools___init___py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools___init___py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_iodownloader_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_iodownloader_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_iomath_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_iomath_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_iometadata_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_iometadata_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_ioparser_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_ioparser_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_ioutil_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_tools_ioutil_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_version_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/pymrio_version_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/status.json
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/status.json
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/style.css
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/style.css
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_context_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_context_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_aggregation_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_aggregation_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_core_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_core_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_integration_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_integration_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_math_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_math_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_outputs_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_outputs_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_parsers_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_parsers_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_util_py.html
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/htmlcov/tests_test_util_py.html
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package pymrio> [hook]
            finish pytest_collect_file --> [<Package pymrio>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/core
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/core/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/core/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/core/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package core> [hook]
            finish pytest_collect_file --> [<Package core>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/mrio_models/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package mrio_models> [hook]
            finish pytest_collect_file --> [<Package mrio_models>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package concordance> [hook]
            finish pytest_collect_file --> [<Package concordance>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package misc> [hook]
            finish pytest_collect_file --> [<Package misc>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package test_mrio> [hook]
            finish pytest_collect_file --> [<Package test_mrio>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package concordance> [hook]
            finish pytest_collect_file --> [<Package concordance>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/tools
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/tools/__init__.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio/tools/__init__.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/pymrio/tools/__init__.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Package tools> [hook]
            finish pytest_collect_file --> [<Package tools>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio/tools/.cache
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/PKG-INFO
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/PKG-INFO
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/SOURCES.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/SOURCES.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/dependency_links.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/dependency_links.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/requires.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/requires.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/top_level.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/pymrio.egg-info/top_level.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_aggregation.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_aggregation.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_aggregation.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_aggregation.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_aggregation.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_core.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_core.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_core.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_core.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_core.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_integration.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_integration.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_integration.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_integration.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_integration.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_math.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_math.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_math.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_math.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_math.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_outputs.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_outputs.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_outputs.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_outputs.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_outputs.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_parsers.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_parsers.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_parsers.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_parsers.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_parsers.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/test_util.py
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/test_util.py
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: /home/konstans/proj/pymrio/tests/test_util.py
                  parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module tests/test_util.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_util.py>] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/readme.rst
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/readme.rst
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/.~lock.Eora26_2010_bp_VA.txt#
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/.~lock.Eora26_2010_bp_VA.txt#
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_FD.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_FD.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_Q.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_Q.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_QY.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_QY.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_T.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_T.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_VA.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/Eora26_2010_bp_VA.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_FD.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_FD.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_Q.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_Q.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_T.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_T.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_VA.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/eora26_mock/labels_VA.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrEmissions.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrEmissions.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrFDEmissions.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrFDEmissions.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrFactorInputs.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrFactorInputs.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrFinalDemand.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrFinalDemand.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrIot.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio1_mock/mrIot.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio2_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio2_mock/mrIOT_PxP_ita_coefficient_version2.2.2.zip
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio2_mock/mrIOT_PxP_ita_coefficient_version2.2.2.zip
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/A.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/A.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/Y.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/Y.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/file_parameters.json
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/file_parameters.json
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/metadata.json
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/metadata.json
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/unit.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/unit.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/F.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/F.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/F_hh.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/F_hh.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/file_parameters.json
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/file_parameters.json
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/unit.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio3_mock/satellite/unit.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_1col.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_1col.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_2col.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_2col.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_3col.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_3col.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_5col.txt
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/exio_ext_mock/ext_5col.txt
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/.~lock.ICIO2016_2003.csv#
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/.~lock.ICIO2016_2003.csv#
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/ICIO2016_2003.csv
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/ICIO2016_2003.csv
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/ICIO2018_2010.CSV
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/ICIO2018_2010.CSV
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/ICIO2018_2010.zip
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/oecd_mock/ICIO2018_2010.zip
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/WIOD_SEA_July14.xlsx
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/WIOD_SEA_July14.xlsx
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/lan_may12.zip
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/lan_may12.zip
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/wiot09_row_sep12.xlsx
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/wiot09_row_sep12.xlsx
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/AUS_AIR_May12.xls
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/AUS_AIR_May12.xls
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/BEL_AIR_May12.xls
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/BEL_AIR_May12.xls
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/LUX_AIR_May12.xls
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/LUX_AIR_May12.xls
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/ROU_AIR_May12.xls
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/ROU_AIR_May12.xls
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/ROW_AIR_May12.xls
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/ROW_AIR_May12.xls
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/USA_AIR_May12.xls
                config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                path: /home/konstans/proj/pymrio/tests/mock_mrios/wiod_mock/AIR_may12/USA_AIR_May12.xls
                parent: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_file --> [] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=15 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=15 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Package pymrio> [collection]
      pytest_collectstart [hook]
          collector: <Package pymrio>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package pymrio>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/.coverage
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/.coverage
            parent: <Package pymrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/version.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/version.py
            parent: <Package pymrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/core
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/.cache
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package core> [collection]
      pytest_collectstart [hook]
          collector: <Package core>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package core>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/constants.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/constants.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/fileio.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/fileio.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/mriosystem.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/core/mriosystem.py
            parent: <Package core>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/core/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/core/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package mrio_models> [collection]
      pytest_collectstart [hook]
          collector: <Package mrio_models>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package mrio_models>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/mrio_models/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/mrio_models/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package concordance> [collection]
      pytest_collectstart [hook]
          collector: <Package concordance>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package concordance>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ALL.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ALL.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/Africa.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/Africa.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/America.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/America.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/AsiaPacific.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/AsiaPacific.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/BRIC.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/BRIC.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/EU.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/EU.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/Europe.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/Europe.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_A.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_A.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_B.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_B.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_C.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_C.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_D.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_D.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_E.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_E.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_F.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_F.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_G_H.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_G_H.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_I.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_I.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_J_K.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_J_K.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_L.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_L.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_M_N_O.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_M_N_O.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_P.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/ISIC_P.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/MiddleEast.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/MiddleEast.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/OECD.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/OECD.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/RoW.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/RoW.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/orig_regions.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/orig_regions.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_A.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_A.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_B.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_B.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_C.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_C.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_D.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_D.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_E.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_E.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_F.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_F.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_G_H.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_G_H.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_I.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_I.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_J_K.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_J_K.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_L.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_L.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_M_N_O.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_M_N_O.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_P.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/concordance/pro_ISIC_P.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/mrio_models/exio20/concordance/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/mrio_models/exio20/concordance/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package misc> [collection]
      pytest_collectstart [hook]
          collector: <Package misc>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package misc>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc/population.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/exio20/misc/population.txt
            parent: <Package misc>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/mrio_models/exio20/misc/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/mrio_models/exio20/misc/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package test_mrio> [collection]
      pytest_collectstart [hook]
          collector: <Package test_mrio>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package test_mrio>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/FDemissions.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/FDemissions.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/emissions.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/emissions.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/factor_input.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/factor_input.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/finald_demand_Y.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/finald_demand_Y.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/metadata.json
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/metadata.json
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/population.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/population.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/readme.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/readme.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/trade_flows_Z.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/trade_flows_Z.txt
            parent: <Package test_mrio>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/__init__.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/mrio_models/test_mrio/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/mrio_models/test_mrio/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package concordance> [collection]
      pytest_collectstart [hook]
          collector: <Package concordance>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package concordance>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/EU.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/EU.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/OECD.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/OECD.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/orig_regions.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/orig_regions.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/orig_sectors.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/orig_sectors.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/sector1.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/sector1.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/sector2.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/sector2.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/sector3.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/sector3.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/supreg1.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/supreg1.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/supreg2.txt
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/mrio_models/test_mrio/concordance/supreg2.txt
            parent: <Package concordance>
        finish pytest_collect_file --> [] [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/mrio_models/test_mrio/concordance/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/mrio_models/test_mrio/concordance/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Package tools> [collection]
      pytest_collectstart [hook]
          collector: <Package tools>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Package tools>
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/iodownloader.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/iodownloader.py
            parent: <Package tools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/iomath.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/iomath.py
            parent: <Package tools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/iometadata.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/iometadata.py
            parent: <Package tools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/ioparser.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/ioparser.py
            parent: <Package tools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/ioutil.py
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/ioutil.py
            parent: <Package tools>
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            path: /home/konstans/proj/pymrio/pymrio/tools/.cache
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_ignore_collect --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'pymrio/tools/__init__.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'pymrio/tools/__init__.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_aggregation.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_aggregation.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_aggregation.py>
      find_module called for: test_aggregation [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_aggregation.py' [assertion]
      found cached rewritten pyc for /home/konstans/proj/pymrio/tests/test_aggregation.py [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: mkl [assertion]
      early skip of rewriting module: ctypes [assertion]
      early skip of rewriting module: _ctypes [assertion]
      early skip of rewriting module: ctypes._endian [assertion]
      early skip of rewriting module: mkl._mklinit [assertion]
      early skip of rewriting module: mkl._py_mkl_service [assertion]
      early skip of rewriting module: mkl.six [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: mkl.warnings [assertion]
      early skip of rewriting module: numpy.core [assertion]
      early skip of rewriting module: numpy.core.multiarray [assertion]
      early skip of rewriting module: numpy.core.overrides [assertion]
      early skip of rewriting module: numpy.core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.compat [assertion]
      early skip of rewriting module: numpy.compat._inspect [assertion]
      early skip of rewriting module: numpy.compat.py3k [assertion]
      early skip of rewriting module: pickle5 [assertion]
      early skip of rewriting module: numpy.core.umath [assertion]
      early skip of rewriting module: numpy.core.numerictypes [assertion]
      early skip of rewriting module: numpy.core._string_helpers [assertion]
      early skip of rewriting module: numpy.core._type_aliases [assertion]
      early skip of rewriting module: numpy.core._dtype [assertion]
      early skip of rewriting module: numpy.core.numeric [assertion]
      early skip of rewriting module: numpy.core.shape_base [assertion]
      early skip of rewriting module: numpy.core._asarray [assertion]
      early skip of rewriting module: numpy.core.fromnumeric [assertion]
      early skip of rewriting module: numpy.core._methods [assertion]
      early skip of rewriting module: numpy.core._exceptions [assertion]
      early skip of rewriting module: numpy.core._ufunc_config [assertion]
      early skip of rewriting module: numpy.core.arrayprint [assertion]
      early skip of rewriting module: numpy.core.defchararray [assertion]
      early skip of rewriting module: numpy.core.records [assertion]
      early skip of rewriting module: numpy.core.memmap [assertion]
      early skip of rewriting module: numpy.core.function_base [assertion]
      early skip of rewriting module: numpy.core.machar [assertion]
      early skip of rewriting module: numpy.core.getlimits [assertion]
      early skip of rewriting module: numpy.core.einsumfunc [assertion]
      early skip of rewriting module: numpy.core._add_newdocs [assertion]
      early skip of rewriting module: numpy.core._multiarray_tests [assertion]
      early skip of rewriting module: numpy.core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy.core._internal [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib.type_check [assertion]
      early skip of rewriting module: numpy.lib.ufunclike [assertion]
      early skip of rewriting module: numpy.lib.index_tricks [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.lib.twodim_base [assertion]
      early skip of rewriting module: numpy.linalg.lapack_lite [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy.lib.function_base [assertion]
      early skip of rewriting module: numpy.lib.histograms [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib.nanfunctions [assertion]
      early skip of rewriting module: numpy.lib.shape_base [assertion]
      early skip of rewriting module: numpy.lib.polynomial [assertion]
      early skip of rewriting module: numpy.lib.utils [assertion]
      early skip of rewriting module: numpy.lib.arraysetops [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib.financial [assertion]
      early skip of rewriting module: numpy.lib.arrayterator [assertion]
      early skip of rewriting module: numpy.lib.arraypad [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy.fft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft [assertion]
      early skip of rewriting module: numpy.fft._pocketfft_internal [assertion]
      early skip of rewriting module: numpy.fft.helper [assertion]
      early skip of rewriting module: numpy.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polynomial [assertion]
      early skip of rewriting module: numpy.polynomial.polyutils [assertion]
      early skip of rewriting module: numpy.polynomial._polybase [assertion]
      early skip of rewriting module: numpy.polynomial.chebyshev [assertion]
      early skip of rewriting module: numpy.polynomial.legendre [assertion]
      early skip of rewriting module: numpy.polynomial.hermite [assertion]
      early skip of rewriting module: numpy.polynomial.hermite_e [assertion]
      early skip of rewriting module: numpy.polynomial.laguerre [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: numpy.random._bit_generator [assertion]
      early skip of rewriting module: numpy.random._common [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: hmac [assertion]
      early skip of rewriting module: numpy.random._bounded_integers [assertion]
      early skip of rewriting module: numpy.random._mt19937 [assertion]
      early skip of rewriting module: numpy.random._philox [assertion]
      early skip of rewriting module: numpy.random._pcg64 [assertion]
      early skip of rewriting module: numpy.random._sfc64 [assertion]
      early skip of rewriting module: numpy.random._generator [assertion]
      early skip of rewriting module: numpy.ctypeslib [assertion]
      early skip of rewriting module: numpy.ma [assertion]
      early skip of rewriting module: numpy.ma.core [assertion]
      early skip of rewriting module: numpy.ma.extras [assertion]
      early skip of rewriting module: pandas [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: pandas.compat [assertion]
      early skip of rewriting module: pandas.compat.numpy [assertion]
      early skip of rewriting module: distutils [assertion]
      early skip of rewriting module: distutils.version [assertion]
      early skip of rewriting module: pandas._libs [assertion]
      early skip of rewriting module: pandas._libs.tslibs [assertion]
      early skip of rewriting module: pandas._libs.tslibs.conversion [assertion]
      early skip of rewriting module: pandas._libs.tslibs.c_timestamp [assertion]
      early skip of rewriting module: pandas._libs.tslibs.nattype [assertion]
      early skip of rewriting module: pandas._libs.missing [assertion]
      early skip of rewriting module: pandas._libs.tslibs.np_datetime [assertion]
      early skip of rewriting module: pandas._libs.ops_dispatch [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timezones [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: six.moves.winreg [assertion]
      early skip of rewriting module: pandas._libs.tslibs.tzconversion [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timedeltas [assertion]
      early skip of rewriting module: pandas._libs.tslibs.offsets [assertion]
      early skip of rewriting module: pandas._libs.tslibs.ccalendar [assertion]
      early skip of rewriting module: pandas._config [assertion]
      early skip of rewriting module: pandas._config.config [assertion]
      early skip of rewriting module: pandas._config.dates [assertion]
      early skip of rewriting module: pandas._config.display [assertion]
      early skip of rewriting module: pandas._config.localization [assertion]
      early skip of rewriting module: pandas._libs.tslibs.strptime [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: pandas._libs.tslibs.fields [assertion]
      early skip of rewriting module: pandas._libs.tslibs.parsing [assertion]
      early skip of rewriting module: pandas._libs.tslibs.frequencies [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: pandas._libs.tslibs.period [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timestamps [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pandas._libs.tslibs.resolution [assertion]
      early skip of rewriting module: pandas._libs.hashtable [assertion]
      early skip of rewriting module: pandas._libs.lib [assertion]
      early skip of rewriting module: fractions [assertion]
      early skip of rewriting module: pandas._libs.tslib [assertion]
      early skip of rewriting module: pandas.core [assertion]
      early skip of rewriting module: pandas.core.config_init [assertion]
      early skip of rewriting module: pandas.core.api [assertion]
      early skip of rewriting module: pandas.core.dtypes [assertion]
      early skip of rewriting module: pandas.core.dtypes.dtypes [assertion]
      early skip of rewriting module: pandas._libs.interval [assertion]
      early skip of rewriting module: pandas._libs.algos [assertion]
      early skip of rewriting module: pandas._typing [assertion]
      early skip of rewriting module: pandas.core.dtypes.base [assertion]
      early skip of rewriting module: pandas.errors [assertion]
      early skip of rewriting module: pandas.core.dtypes.generic [assertion]
      early skip of rewriting module: pandas.core.dtypes.inference [assertion]
      early skip of rewriting module: pandas.core.dtypes.missing [assertion]
      early skip of rewriting module: pandas.core.dtypes.common [assertion]
      early skip of rewriting module: pandas.core.algorithms [assertion]
      early skip of rewriting module: pandas.util [assertion]
      early skip of rewriting module: pandas.util._decorators [assertion]
      early skip of rewriting module: pandas._libs.properties [assertion]
      early skip of rewriting module: pandas.core.util [assertion]
      early skip of rewriting module: pandas.core.util.hashing [assertion]
      early skip of rewriting module: pandas._libs.hashing [assertion]
      early skip of rewriting module: pandas.core.dtypes.cast [assertion]
      early skip of rewriting module: pandas.util._validators [assertion]
      early skip of rewriting module: pandas.core.common [assertion]
      early skip of rewriting module: pandas.core.construction [assertion]
      early skip of rewriting module: pandas.core.indexers [assertion]
      early skip of rewriting module: pandas.core.arrays [assertion]
      early skip of rewriting module: pandas.core.arrays.base [assertion]
      early skip of rewriting module: pandas.compat.numpy.function [assertion]
      early skip of rewriting module: pandas.core.ops [assertion]
      early skip of rewriting module: pandas.core.ops.array_ops [assertion]
      early skip of rewriting module: pandas._libs.ops [assertion]
      early skip of rewriting module: pandas.core.ops.missing [assertion]
      early skip of rewriting module: pandas.core.ops.roperator [assertion]
      early skip of rewriting module: pandas.core.ops.dispatch [assertion]
      early skip of rewriting module: pandas.core.ops.invalid [assertion]
      early skip of rewriting module: pandas.core.ops.common [assertion]
      early skip of rewriting module: pandas.core.ops.docstrings [assertion]
      early skip of rewriting module: pandas.core.ops.mask_ops [assertion]
      early skip of rewriting module: pandas.core.ops.methods [assertion]
      early skip of rewriting module: pandas.core.missing [assertion]
      early skip of rewriting module: pandas.compat._optional [assertion]
      early skip of rewriting module: pandas.core.sorting [assertion]
      early skip of rewriting module: pandas.core.arrays.boolean [assertion]
      early skip of rewriting module: pandas.core.nanops [assertion]
      early skip of rewriting module: bottleneck [assertion]
      early skip of rewriting module: bottleneck.reduce [assertion]
      early skip of rewriting module: bottleneck.nonreduce [assertion]
      early skip of rewriting module: bottleneck.nonreduce_axis [assertion]
      early skip of rewriting module: bottleneck.move [assertion]
      early skip of rewriting module: bottleneck.slow [assertion]
      early skip of rewriting module: bottleneck.slow.reduce [assertion]
      early skip of rewriting module: bottleneck.slow.nonreduce [assertion]
      early skip of rewriting module: bottleneck.slow.nonreduce_axis [assertion]
      early skip of rewriting module: bottleneck.slow.move [assertion]
      early skip of rewriting module: bottleneck.benchmark [assertion]
      early skip of rewriting module: bottleneck.benchmark.bench [assertion]
      early skip of rewriting module: bottleneck.benchmark.autotimeit [assertion]
      early skip of rewriting module: timeit [assertion]
      early skip of rewriting module: gc [assertion]
      early skip of rewriting module: bottleneck.benchmark.bench_detailed [assertion]
      early skip of rewriting module: bottleneck.tests [assertion]
      early skip of rewriting module: bottleneck.tests.util [assertion]
      early skip of rewriting module: bottleneck._pytesttester [assertion]
      early skip of rewriting module: bottleneck._version [assertion]
      early skip of rewriting module: pandas.core.arrays.masked [assertion]
      early skip of rewriting module: pandas.core.arrays.categorical [assertion]
      early skip of rewriting module: pandas.core.accessor [assertion]
      early skip of rewriting module: pandas.core.base [assertion]
      early skip of rewriting module: pandas.io [assertion]
      early skip of rewriting module: pandas.io.formats [assertion]
      early skip of rewriting module: pandas.io.formats.console [assertion]
      early skip of rewriting module: pandas.core.arrays.datetimes [assertion]
      early skip of rewriting module: pandas.core.arrays.datetimelike [assertion]
      early skip of rewriting module: pandas.tseries [assertion]
      early skip of rewriting module: pandas.tseries.frequencies [assertion]
      early skip of rewriting module: pandas.tseries.offsets [assertion]
      early skip of rewriting module: dateutil.easter [assertion]
      early skip of rewriting module: pandas.core.arrays._ranges [assertion]
      early skip of rewriting module: pandas.core.arrays.integer [assertion]
      early skip of rewriting module: pandas.core.tools [assertion]
      early skip of rewriting module: pandas.core.tools.numeric [assertion]
      early skip of rewriting module: pandas.core.arrays.interval [assertion]
      early skip of rewriting module: pandas.core.indexes [assertion]
      early skip of rewriting module: pandas.core.indexes.base [assertion]
      early skip of rewriting module: pandas._libs.index [assertion]
      early skip of rewriting module: pandas._libs.join [assertion]
      early skip of rewriting module: pandas.core.dtypes.concat [assertion]
      early skip of rewriting module: pandas.core.indexes.frozen [assertion]
      early skip of rewriting module: pandas.io.formats.printing [assertion]
      early skip of rewriting module: pandas.core.strings [assertion]
      early skip of rewriting module: pandas.core.arrays.numpy_ [assertion]
      early skip of rewriting module: pandas.core.arrays.period [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.accessor [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.array [assertion]
      early skip of rewriting module: pandas._libs.sparse [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.dtype [assertion]
      early skip of rewriting module: pandas.core.arrays.string_ [assertion]
      early skip of rewriting module: pandas.core.arrays.timedeltas [assertion]
      early skip of rewriting module: pandas.core.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.generic [assertion]
      early skip of rewriting module: pandas.core.frame [assertion]
      early skip of rewriting module: pandas.core.generic [assertion]
      early skip of rewriting module: pandas.core.indexes.api [assertion]
      early skip of rewriting module: pandas.core.indexes.category [assertion]
      early skip of rewriting module: pandas.core.indexes.extension [assertion]
      early skip of rewriting module: pandas.core.indexes.datetimes [assertion]
      early skip of rewriting module: pandas.core.indexes.datetimelike [assertion]
      early skip of rewriting module: pandas.core.indexes.numeric [assertion]
      early skip of rewriting module: pandas.core.tools.timedeltas [assertion]
      early skip of rewriting module: pandas.core.tools.datetimes [assertion]
      early skip of rewriting module: pandas.arrays [assertion]
      early skip of rewriting module: pandas.core.indexes.interval [assertion]
      early skip of rewriting module: pandas.util._exceptions [assertion]
      early skip of rewriting module: pandas.core.indexes.multi [assertion]
      early skip of rewriting module: pandas.core.indexes.timedeltas [assertion]
      early skip of rewriting module: pandas.core.indexes.period [assertion]
      early skip of rewriting module: pandas.core.indexes.range [assertion]
      early skip of rewriting module: pandas.core.indexing [assertion]
      early skip of rewriting module: pandas._libs.indexing [assertion]
      early skip of rewriting module: pandas.core.internals [assertion]
      early skip of rewriting module: pandas.core.internals.blocks [assertion]
      early skip of rewriting module: pandas._libs.writers [assertion]
      early skip of rewriting module: pandas._libs.internals [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pandas.core.internals.managers [assertion]
      early skip of rewriting module: pandas.core.internals.concat [assertion]
      early skip of rewriting module: pandas.io.formats.format [assertion]
      early skip of rewriting module: pandas.io.common [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: mmap [assertion]
      early skip of rewriting module: pandas.core.internals.construction [assertion]
      early skip of rewriting module: pandas.core.series [assertion]
      early skip of rewriting module: pandas._libs.reshape [assertion]
      early skip of rewriting module: pandas.core.indexes.accessors [assertion]
      early skip of rewriting module: pandas.plotting [assertion]
      early skip of rewriting module: pandas.plotting._core [assertion]
      early skip of rewriting module: pandas.plotting._misc [assertion]
      early skip of rewriting module: pandas.core.window [assertion]
      early skip of rewriting module: pandas.core.window.ewm [assertion]
      early skip of rewriting module: pandas._libs.window [assertion]
      early skip of rewriting module: pandas._libs.window.aggregations [assertion]
      early skip of rewriting module: pandas.core.window.common [assertion]
      early skip of rewriting module: pandas.core.groupby.base [assertion]
      early skip of rewriting module: pandas.core.window.rolling [assertion]
      early skip of rewriting module: pandas.core.window.indexers [assertion]
      early skip of rewriting module: pandas._libs.window.indexers [assertion]
      early skip of rewriting module: pandas.core.window.numba_ [assertion]
      early skip of rewriting module: pandas.core.window.expanding [assertion]
      early skip of rewriting module: pandas.core.groupby.groupby [assertion]
      early skip of rewriting module: pandas._libs.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.ops [assertion]
      early skip of rewriting module: pandas._libs.reduction [assertion]
      early skip of rewriting module: pandas.core.groupby.grouper [assertion]
      early skip of rewriting module: pandas.core.groupby.categorical [assertion]
      early skip of rewriting module: pandas.tseries.api [assertion]
      early skip of rewriting module: pandas.core.computation [assertion]
      early skip of rewriting module: pandas.core.computation.api [assertion]
      early skip of rewriting module: pandas.core.computation.eval [assertion]
      early skip of rewriting module: pandas.core.computation.engines [assertion]
      early skip of rewriting module: pandas.core.computation.align [assertion]
      early skip of rewriting module: pandas.core.computation.common [assertion]
      early skip of rewriting module: pandas.core.computation.ops [assertion]
      early skip of rewriting module: pandas.core.computation.scope [assertion]
      early skip of rewriting module: pandas.compat.chainmap [assertion]
      early skip of rewriting module: pandas.core.computation.expr [assertion]
      early skip of rewriting module: pandas.core.computation.parsing [assertion]
      early skip of rewriting module: pandas.core.reshape [assertion]
      early skip of rewriting module: pandas.core.reshape.api [assertion]
      early skip of rewriting module: pandas.core.reshape.concat [assertion]
      early skip of rewriting module: pandas.core.reshape.melt [assertion]
      early skip of rewriting module: pandas.core.reshape.merge [assertion]
      early skip of rewriting module: pandas.core.reshape.pivot [assertion]
      early skip of rewriting module: pandas.core.reshape.util [assertion]
      early skip of rewriting module: pandas.core.reshape.reshape [assertion]
      early skip of rewriting module: pandas.core.reshape.tile [assertion]
      early skip of rewriting module: pandas.api [assertion]
      early skip of rewriting module: pandas.api.extensions [assertion]
      early skip of rewriting module: pandas.api.indexers [assertion]
      early skip of rewriting module: pandas.api.types [assertion]
      early skip of rewriting module: pandas.core.dtypes.api [assertion]
      early skip of rewriting module: pandas.util._print_versions [assertion]
      early skip of rewriting module: pandas.io.api [assertion]
      early skip of rewriting module: pandas.io.clipboards [assertion]
      early skip of rewriting module: pandas.io.excel [assertion]
      early skip of rewriting module: pandas.io.excel._base [assertion]
      early skip of rewriting module: pandas._libs.parsers [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: pandas.io.excel._util [assertion]
      early skip of rewriting module: pandas.io.parsers [assertion]
      early skip of rewriting module: pandas.io.date_converters [assertion]
      early skip of rewriting module: pandas.io.excel._odfreader [assertion]
      early skip of rewriting module: pandas.io.excel._openpyxl [assertion]
      early skip of rewriting module: pandas.io.excel._xlrd [assertion]
      early skip of rewriting module: pandas.io.excel._pyxlsb [assertion]
      early skip of rewriting module: pandas.io.excel._xlsxwriter [assertion]
      early skip of rewriting module: pandas._libs.json [assertion]
      early skip of rewriting module: pandas.io.excel._xlwt [assertion]
      early skip of rewriting module: pandas.io.feather_format [assertion]
      early skip of rewriting module: pandas.io.gbq [assertion]
      early skip of rewriting module: pandas.io.html [assertion]
      early skip of rewriting module: pandas.io.json [assertion]
      early skip of rewriting module: pandas.io.json._json [assertion]
      early skip of rewriting module: pandas.io.json._normalize [assertion]
      early skip of rewriting module: pandas.io.json._table_schema [assertion]
      early skip of rewriting module: pandas.io.orc [assertion]
      early skip of rewriting module: pandas.io.parquet [assertion]
      early skip of rewriting module: pandas.io.pickle [assertion]
      early skip of rewriting module: pandas.compat.pickle_compat [assertion]
      early skip of rewriting module: pandas.io.pytables [assertion]
      early skip of rewriting module: pandas.core.computation.pytables [assertion]
      early skip of rewriting module: pandas.io.sas [assertion]
      early skip of rewriting module: pandas.io.sas.sasreader [assertion]
      early skip of rewriting module: pandas.io.spss [assertion]
      early skip of rewriting module: pandas.io.sql [assertion]
      early skip of rewriting module: pandas.io.stata [assertion]
      early skip of rewriting module: pandas.util._tester [assertion]
      early skip of rewriting module: pandas.testing [assertion]
      early skip of rewriting module: pandas._testing [assertion]
      early skip of rewriting module: pandas._libs.testing [assertion]
      early skip of rewriting module: pandas._version [assertion]
      find_module called for: pymrio [assertion]
      early skip of rewriting module: pymrio.version [assertion]
      early skip of rewriting module: pymrio.core [assertion]
      early skip of rewriting module: pymrio.core.mriosystem [assertion]
      early skip of rewriting module: matplotlib [assertion]
      early skip of rewriting module: matplotlib.cbook [assertion]
      early skip of rewriting module: matplotlib.cbook.deprecation [assertion]
      early skip of rewriting module: matplotlib.rcsetup [assertion]
      early skip of rewriting module: matplotlib.fontconfig_pattern [assertion]
      early skip of rewriting module: pyparsing [assertion]
      early skip of rewriting module: matplotlib.colors [assertion]
      early skip of rewriting module: matplotlib.docstring [assertion]
      early skip of rewriting module: matplotlib._color_data [assertion]
      early skip of rewriting module: cycler [assertion]
      early skip of rewriting module: matplotlib._version [assertion]
      early skip of rewriting module: matplotlib.ft2font [assertion]
      early skip of rewriting module: kiwisolver [assertion]
      early skip of rewriting module: matplotlib.pyplot [assertion]
      early skip of rewriting module: matplotlib.colorbar [assertion]
      early skip of rewriting module: matplotlib.artist [assertion]
      early skip of rewriting module: matplotlib.path [assertion]
      early skip of rewriting module: matplotlib._path [assertion]
      early skip of rewriting module: matplotlib.transforms [assertion]
      early skip of rewriting module: matplotlib.collections [assertion]
      early skip of rewriting module: matplotlib.cm [assertion]
      early skip of rewriting module: matplotlib._cm [assertion]
      early skip of rewriting module: matplotlib._cm_listed [assertion]
      early skip of rewriting module: matplotlib.lines [assertion]
      early skip of rewriting module: matplotlib.markers [assertion]
      early skip of rewriting module: matplotlib.contour [assertion]
      early skip of rewriting module: matplotlib.ticker [assertion]
      early skip of rewriting module: matplotlib.font_manager [assertion]
      early skip of rewriting module: matplotlib.afm [assertion]
      early skip of rewriting module: matplotlib._mathtext_data [assertion]
      early skip of rewriting module: matplotlib.text [assertion]
      early skip of rewriting module: matplotlib.patches [assertion]
      early skip of rewriting module: matplotlib.bezier [assertion]
      early skip of rewriting module: matplotlib.textpath [assertion]
      early skip of rewriting module: matplotlib._text_layout [assertion]
      early skip of rewriting module: matplotlib.dviread [assertion]
      early skip of rewriting module: matplotlib.mathtext [assertion]
      early skip of rewriting module: matplotlib.texmanager [assertion]
      early skip of rewriting module: matplotlib.blocking_input [assertion]
      early skip of rewriting module: matplotlib.gridspec [assertion]
      early skip of rewriting module: matplotlib._pylab_helpers [assertion]
      early skip of rewriting module: matplotlib.tight_layout [assertion]
      early skip of rewriting module: matplotlib._layoutbox [assertion]
      early skip of rewriting module: matplotlib._constrained_layout [assertion]
      early skip of rewriting module: matplotlib.image [assertion]
      early skip of rewriting module: matplotlib.backend_bases [assertion]
      early skip of rewriting module: matplotlib.backend_tools [assertion]
      early skip of rewriting module: matplotlib.tight_bbox [assertion]
      early skip of rewriting module: matplotlib.widgets [assertion]
      early skip of rewriting module: PIL [assertion]
      early skip of rewriting module: PIL._version [assertion]
      early skip of rewriting module: matplotlib._image [assertion]
      early skip of rewriting module: matplotlib.style [assertion]
      early skip of rewriting module: matplotlib.style.core [assertion]
      early skip of rewriting module: matplotlib.figure [assertion]
      early skip of rewriting module: matplotlib.backends [assertion]
      early skip of rewriting module: matplotlib.projections [assertion]
      early skip of rewriting module: matplotlib.axes [assertion]
      early skip of rewriting module: matplotlib.axes._subplots [assertion]
      early skip of rewriting module: matplotlib.axes._axes [assertion]
      early skip of rewriting module: matplotlib.category [assertion]
      early skip of rewriting module: matplotlib.units [assertion]
      early skip of rewriting module: matplotlib.dates [assertion]
      early skip of rewriting module: dateutil.rrule [assertion]
      early skip of rewriting module: matplotlib.legend [assertion]
      early skip of rewriting module: matplotlib.offsetbox [assertion]
      early skip of rewriting module: matplotlib.container [assertion]
      early skip of rewriting module: matplotlib.legend_handler [assertion]
      early skip of rewriting module: matplotlib.mlab [assertion]
      early skip of rewriting module: matplotlib.quiver [assertion]
      early skip of rewriting module: matplotlib.stackplot [assertion]
      early skip of rewriting module: matplotlib.streamplot [assertion]
      early skip of rewriting module: matplotlib.table [assertion]
      early skip of rewriting module: matplotlib.tri [assertion]
      early skip of rewriting module: matplotlib.tri.triangulation [assertion]
      early skip of rewriting module: matplotlib.tri.tricontour [assertion]
      early skip of rewriting module: matplotlib.tri.tritools [assertion]
      early skip of rewriting module: matplotlib.tri.trifinder [assertion]
      early skip of rewriting module: matplotlib.tri.triinterpolate [assertion]
      early skip of rewriting module: matplotlib.tri.trirefine [assertion]
      early skip of rewriting module: matplotlib.tri.tripcolor [assertion]
      early skip of rewriting module: matplotlib.tri.triplot [assertion]
      early skip of rewriting module: matplotlib.axes._base [assertion]
      early skip of rewriting module: matplotlib.axis [assertion]
      early skip of rewriting module: matplotlib.scale [assertion]
      early skip of rewriting module: matplotlib.spines [assertion]
      early skip of rewriting module: matplotlib.axes._secondary_axes [assertion]
      early skip of rewriting module: matplotlib.projections.geo [assertion]
      early skip of rewriting module: matplotlib.projections.polar [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.axes3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.art3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.proj3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.axis3d [assertion]
      early skip of rewriting module: matplotlib.backends.backend_qt5agg [assertion]
      early skip of rewriting module: matplotlib.backends.backend_agg [assertion]
      early skip of rewriting module: matplotlib.backends._backend_agg [assertion]
      early skip of rewriting module: PIL.Image [assertion]
      early skip of rewriting module: PIL.ImageMode [assertion]
      early skip of rewriting module: PIL.TiffTags [assertion]
      early skip of rewriting module: PIL._binary [assertion]
      early skip of rewriting module: PIL._util [assertion]
      early skip of rewriting module: PIL._imaging [assertion]
      early skip of rewriting module: cffi [assertion]
      early skip of rewriting module: cffi.api [assertion]
      early skip of rewriting module: cffi.lock [assertion]
      early skip of rewriting module: cffi.error [assertion]
      early skip of rewriting module: cffi.model [assertion]
      early skip of rewriting module: matplotlib.backends.backend_qt5 [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor.figureoptions [assertion]
      early skip of rewriting module: matplotlib.backends.qt_compat [assertion]
      early skip of rewriting module: PyQt5 [assertion]
      early skip of rewriting module: PyQt5.QtCore [assertion]
      early skip of rewriting module: sip [assertion]
      early skip of rewriting module: PyQt5.QtGui [assertion]
      early skip of rewriting module: PyQt5.QtWidgets [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor._formlayout [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor.formsubplottool [assertion]
      early skip of rewriting module: matplotlib.backend_managers [assertion]
      early skip of rewriting module: pymrio.tools [assertion]
      early skip of rewriting module: pymrio.tools.iomath [assertion]
      early skip of rewriting module: pymrio.tools.ioutil [assertion]
      early skip of rewriting module: pymrio.core.constants [assertion]
      early skip of rewriting module: pymrio.tools.iometadata [assertion]
      early skip of rewriting module: pymrio.core.fileio [assertion]
      early skip of rewriting module: pymrio.tools.ioparser [assertion]
      early skip of rewriting module: pymrio.tools.iodownloader [assertion]
      early skip of rewriting module: requests [assertion]
      early skip of rewriting module: urllib3 [assertion]
      early skip of rewriting module: urllib3.connectionpool [assertion]
      early skip of rewriting module: urllib3.exceptions [assertion]
      early skip of rewriting module: urllib3.packages [assertion]
      early skip of rewriting module: urllib3.packages.ssl_match_hostname [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: urllib3.packages.six [assertion]
      early skip of rewriting module: urllib3.packages.six.moves [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.http_client [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: urllib3.connection [assertion]
      early skip of rewriting module: urllib3.util [assertion]
      early skip of rewriting module: urllib3.util.connection [assertion]
      early skip of rewriting module: urllib3.util.wait [assertion]
      early skip of rewriting module: urllib3.contrib [assertion]
      early skip of rewriting module: urllib3.contrib._appengine_environ [assertion]
      early skip of rewriting module: urllib3.util.request [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: brotli.brotli [assertion]
      early skip of rewriting module: brotli._brotli [assertion]
      early skip of rewriting module: _cffi_backend [assertion]
      early skip of rewriting module: urllib3.util.response [assertion]
      early skip of rewriting module: urllib3.util.ssl_ [assertion]
      early skip of rewriting module: urllib3.util.url [assertion]
      early skip of rewriting module: urllib3.util.timeout [assertion]
      early skip of rewriting module: urllib3.util.retry [assertion]
      early skip of rewriting module: urllib3._collections [assertion]
      early skip of rewriting module: urllib3.request [assertion]
      early skip of rewriting module: urllib3.filepost [assertion]
      early skip of rewriting module: urllib3.fields [assertion]
      early skip of rewriting module: mimetypes [assertion]
      early skip of rewriting module: winreg [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.urllib [assertion]
      early skip of rewriting module: urllib3.packages.six.moves.urllib.parse [assertion]
      early skip of rewriting module: urllib3.response [assertion]
      early skip of rewriting module: urllib3.util.queue [assertion]
      early skip of rewriting module: urllib3.poolmanager [assertion]
      early skip of rewriting module: chardet [assertion]
      early skip of rewriting module: chardet.compat [assertion]
      early skip of rewriting module: chardet.universaldetector [assertion]
      early skip of rewriting module: chardet.charsetgroupprober [assertion]
      early skip of rewriting module: chardet.enums [assertion]
      early skip of rewriting module: chardet.charsetprober [assertion]
      early skip of rewriting module: chardet.escprober [assertion]
      early skip of rewriting module: chardet.codingstatemachine [assertion]
      early skip of rewriting module: chardet.escsm [assertion]
      early skip of rewriting module: chardet.latin1prober [assertion]
      early skip of rewriting module: chardet.mbcsgroupprober [assertion]
      early skip of rewriting module: chardet.utf8prober [assertion]
      early skip of rewriting module: chardet.mbcssm [assertion]
      early skip of rewriting module: chardet.sjisprober [assertion]
      early skip of rewriting module: chardet.mbcharsetprober [assertion]
      early skip of rewriting module: chardet.chardistribution [assertion]
      early skip of rewriting module: chardet.euctwfreq [assertion]
      early skip of rewriting module: chardet.euckrfreq [assertion]
      early skip of rewriting module: chardet.gb2312freq [assertion]
      early skip of rewriting module: chardet.big5freq [assertion]
      early skip of rewriting module: chardet.jisfreq [assertion]
      early skip of rewriting module: chardet.jpcntx [assertion]
      early skip of rewriting module: chardet.eucjpprober [assertion]
      early skip of rewriting module: chardet.gb2312prober [assertion]
      early skip of rewriting module: chardet.euckrprober [assertion]
      early skip of rewriting module: chardet.cp949prober [assertion]
      early skip of rewriting module: chardet.big5prober [assertion]
      early skip of rewriting module: chardet.euctwprober [assertion]
      early skip of rewriting module: chardet.sbcsgroupprober [assertion]
      early skip of rewriting module: chardet.sbcharsetprober [assertion]
      early skip of rewriting module: chardet.langcyrillicmodel [assertion]
      early skip of rewriting module: chardet.langgreekmodel [assertion]
      early skip of rewriting module: chardet.langbulgarianmodel [assertion]
      early skip of rewriting module: chardet.langthaimodel [assertion]
      early skip of rewriting module: chardet.langhebrewmodel [assertion]
      early skip of rewriting module: chardet.hebrewprober [assertion]
      early skip of rewriting module: chardet.langturkishmodel [assertion]
      early skip of rewriting module: chardet.version [assertion]
      early skip of rewriting module: requests.exceptions [assertion]
      early skip of rewriting module: requests.__version__ [assertion]
      early skip of rewriting module: requests.utils [assertion]
      early skip of rewriting module: requests.certs [assertion]
      early skip of rewriting module: certifi [assertion]
      early skip of rewriting module: certifi.core [assertion]
      early skip of rewriting module: importlib.resources [assertion]
      early skip of rewriting module: requests._internal_utils [assertion]
      early skip of rewriting module: requests.compat [assertion]
      early skip of rewriting module: simplejson [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: http.cookiejar [assertion]
      early skip of rewriting module: http.cookies [assertion]
      early skip of rewriting module: requests.cookies [assertion]
      early skip of rewriting module: requests.structures [assertion]
      early skip of rewriting module: requests.packages [assertion]
      early skip of rewriting module: idna [assertion]
      early skip of rewriting module: idna.package_data [assertion]
      early skip of rewriting module: idna.core [assertion]
      early skip of rewriting module: idna.idnadata [assertion]
      early skip of rewriting module: idna.intranges [assertion]
      early skip of rewriting module: requests.models [assertion]
      early skip of rewriting module: encodings.idna [assertion]
      early skip of rewriting module: stringprep [assertion]
      early skip of rewriting module: requests.hooks [assertion]
      early skip of rewriting module: requests.auth [assertion]
      early skip of rewriting module: requests.status_codes [assertion]
      early skip of rewriting module: requests.api [assertion]
      early skip of rewriting module: requests.sessions [assertion]
      early skip of rewriting module: requests.adapters [assertion]
      early skip of rewriting module: urllib3.contrib.socks [assertion]
      early skip of rewriting module: socks [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: np
            obj: <module 'numpy' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: pd
            obj: <module 'pandas' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: TESTPATH
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: pymrio
            obj: <module 'pymrio' from '/home/konstans/proj/pymrio/tests/../pymrio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: test_aggreation_regions
            obj: <function test_aggreation_regions at 0x7f9b8da90820>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b8da36580>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_aggreation_regions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: test_numerical_aggreation_sectors
            obj: <function test_numerical_aggreation_sectors at 0x7f9b8c4b7550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b8da36580>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_numerical_aggreation_sectors>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: test_wrong_inputs
            obj: <function test_wrong_inputs at 0x7f9b7a3020d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b8da367c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_wrong_inputs>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: test_total_agg
            obj: <function test_total_agg at 0x7f9b7a302160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5df0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_total_agg>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_aggregation.py>
            name: test_underdefined_agg
            obj: <function test_underdefined_agg at 0x7f9b7a3021f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b8da367c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_underdefined_agg>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_aggregation.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_aggreation_regions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_aggreation_regions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_numerical_aggreation_sectors> [collection]
      pytest_itemcollected [hook]
          item: <Function test_numerical_aggreation_sectors>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_wrong_inputs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_wrong_inputs>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_total_agg> [collection]
      pytest_itemcollected [hook]
          item: <Function test_total_agg>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_underdefined_agg> [collection]
      pytest_itemcollected [hook]
          item: <Function test_underdefined_agg>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_aggregation.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_core.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_core.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_core.py>
      find_module called for: test_core [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_core.py' [assertion]
      found cached rewritten pyc for /home/konstans/proj/pymrio/tests/test_core.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: pd
            obj: <module 'pandas' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: pdt
            obj: <module 'pandas.testing' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pandas/testing.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: TESTPATH
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: pymrio
            obj: <module 'pymrio' from '/home/konstans/proj/pymrio/tests/../pymrio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: fix_testmrio
            obj: <function fix_testmrio at 0x7f9b7a302af0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_copy
            obj: <function test_copy at 0x7f9b7a302b80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a31c580>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_copy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_get_index
            obj: <function test_get_index at 0x7f9b7a302c10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a31c6d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_index>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_set_index
            obj: <function test_set_index at 0x7f9b7a302ca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_set_index>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_get_sectors
            obj: <function test_get_sectors at 0x7f9b7a302d30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_sectors>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_get_regions
            obj: <function test_get_regions at 0x7f9b7a302dc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_regions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_get_Y_categories
            obj: <function test_get_Y_categories at 0x7f9b7a302e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_Y_categories>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_rename_regions
            obj: <function test_rename_regions at 0x7f9b7a302ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_rename_regions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_rename_sectors
            obj: <function test_rename_sectors at 0x7f9b7a302f70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_rename_sectors>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_rename_Ycat
            obj: <function test_rename_Ycat at 0x7f9b7a2af040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_rename_Ycat>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_copy_and_extensions
            obj: <function test_copy_and_extensions at 0x7f9b7a2af0d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_copy_and_extensions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_get_row_data
            obj: <function test_get_row_data at 0x7f9b7a2af160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_get_row_data>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_diag_stressor
            obj: <function test_diag_stressor at 0x7f9b7a2af1f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_diag_stressor>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_reset_to_flows
            obj: <function test_reset_to_flows at 0x7f9b7a2af280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reset_to_flows>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_reset_all_to_flows
            obj: <function test_reset_all_to_flows at 0x7f9b7a2af310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reset_all_to_flows>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_reset_full
            obj: <function test_reset_full at 0x7f9b7a2af3a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reset_full>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_reset_all_full
            obj: <function test_reset_all_full at 0x7f9b7a2af430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5d60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reset_all_full>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_core.py>
            name: test_reset_to_coefficients
            obj: <function test_reset_to_coefficients at 0x7f9b7a2af4c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a2f5280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reset_to_coefficients>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_core.py' lenresult=17 outcome='passed'> [hook]
    genitems <Function test_copy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_copy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_index> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_index>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_set_index> [collection]
      pytest_itemcollected [hook]
          item: <Function test_set_index>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_sectors> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_sectors>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_regions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_regions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_Y_categories> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_Y_categories>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_rename_regions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_rename_regions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_rename_sectors> [collection]
      pytest_itemcollected [hook]
          item: <Function test_rename_sectors>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_rename_Ycat> [collection]
      pytest_itemcollected [hook]
          item: <Function test_rename_Ycat>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_copy_and_extensions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_copy_and_extensions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_get_row_data> [collection]
      pytest_itemcollected [hook]
          item: <Function test_get_row_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_diag_stressor> [collection]
      pytest_itemcollected [hook]
          item: <Function test_diag_stressor>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reset_to_flows> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reset_to_flows>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reset_all_to_flows> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reset_all_to_flows>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reset_full> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reset_full>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reset_all_full> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reset_all_full>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reset_to_coefficients> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reset_to_coefficients>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_core.py' lenresult=17 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_integration.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_integration.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_integration.py>
      find_module called for: test_integration [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_integration.py' [assertion]
      found cached rewritten pyc for /home/konstans/proj/pymrio/tests/test_integration.py [assertion]
      early skip of rewriting module: numpy.testing [assertion]
      early skip of rewriting module: unittest [assertion]
      early skip of rewriting module: unittest.result [assertion]
      early skip of rewriting module: unittest.util [assertion]
      early skip of rewriting module: unittest.async_case [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.unix_events [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
      early skip of rewriting module: unittest.case [assertion]
      early skip of rewriting module: difflib [assertion]
      early skip of rewriting module: unittest.suite [assertion]
      early skip of rewriting module: unittest.loader [assertion]
      early skip of rewriting module: unittest.main [assertion]
      early skip of rewriting module: unittest.runner [assertion]
      early skip of rewriting module: unittest.signals [assertion]
      early skip of rewriting module: numpy.testing._private [assertion]
      early skip of rewriting module: numpy.testing._private.utils [assertion]
      early skip of rewriting module: numpy.testing._private.decorators [assertion]
      early skip of rewriting module: numpy.testing._private.nosetester [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: np
            obj: <module 'numpy' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: npt
            obj: <module 'numpy.testing' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/testing/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: TESTPATH
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: pymrio
            obj: <module 'pymrio' from '/home/konstans/proj/pymrio/tests/../pymrio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: td_testmrio
            obj: <function td_testmrio at 0x7f9b7a2afaf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: test_all
            obj: <function test_all at 0x7f9b7a1954c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a18da30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_all>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: test_fileio
            obj: <function test_fileio at 0x7f9b7a195550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a18db80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_fileio>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: test_reports
            obj: <function test_reports at 0x7f9b7a1955e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a18dd60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reports>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_integration.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_all> [collection]
      pytest_itemcollected [hook]
          item: <Function test_all>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_fileio> [collection]
      pytest_itemcollected [hook]
          item: <Function test_fileio>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reports> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reports>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_integration.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_math.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_math.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_math.py>
      find_module called for: test_math [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_math.py' [assertion]
      _read_pyc(/home/konstans/proj/pymrio/tests/test_math.py): invalid or out of date pyc [assertion]
      rewriting PosixPath('/home/konstans/proj/pymrio/tests/test_math.py') [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: np
            obj: <module 'numpy' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: pd
            obj: <module 'pandas' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pandas/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: npt
            obj: <module 'numpy.testing' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/testing/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: pdt
            obj: <module 'pandas.testing' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pandas/testing.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: TESTPATH
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_x
            obj: <function calc_x at 0x7f9b8c6ad4c0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_x_from_L
            obj: <function calc_x_from_L at 0x7f9b8c6adca0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_Z
            obj: <function calc_Z at 0x7f9b8c6add30>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_A
            obj: <function calc_A at 0x7f9b8c6addc0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_L
            obj: <function calc_L at 0x7f9b8c6ade50>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_S
            obj: <function calc_S at 0x7f9b8c6adee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_S_Y
            obj: <function calc_S_Y at 0x7f9b8c6adf70>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_F
            obj: <function calc_F at 0x7f9b8c6b2040>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_F_Y
            obj: <function calc_F_Y at 0x7f9b8c6b20d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_M
            obj: <function calc_M at 0x7f9b8c6b2160>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_e
            obj: <function calc_e at 0x7f9b8c6b21f0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: calc_accounts
            obj: <function calc_accounts at 0x7f9b8c6b2310>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: td_IO_Data_Miller
            obj: <function td_IO_Data_Miller at 0x7f9b7a195820>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: td_small_MRIO
            obj: <function td_small_MRIO at 0x7f9b7a195940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_x_df
            obj: <function test_calc_x_df at 0x7f9b7a1959d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b4c0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_x_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_x_arr
            obj: <function test_calc_x_arr at 0x7f9b7a195a60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b5b0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_x_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_Z_df
            obj: <function test_calc_Z_df at 0x7f9b7a195af0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b820>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_Z_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_Z_arr
            obj: <function test_calc_Z_arr at 0x7f9b7a195b80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b7f0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_Z_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_A_df
            obj: <function test_calc_A_df at 0x7f9b7a195c10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11ba30>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_A_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_A_arr
            obj: <function test_calc_A_arr at 0x7f9b7a195ca0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bd90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_A_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_L_df
            obj: <function test_calc_L_df at 0x7f9b7a195d30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_L_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_L_arr
            obj: <function test_calc_L_arr at 0x7f9b7a195dc0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bd90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_L_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_x_from_L_df
            obj: <function test_calc_x_from_L_df at 0x7f9b7a195e50>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_x_from_L_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_x_from_L_arr
            obj: <function test_calc_x_from_L_arr at 0x7f9b7a195ee0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bd90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_x_from_L_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_F_arr
            obj: <function test_calc_F_arr at 0x7f9b7a195f70>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_F_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_F_df
            obj: <function test_calc_F_df at 0x7f9b7a06d040>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bd90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_F_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_S_arr
            obj: <function test_calc_S_arr at 0x7f9b7a06d0d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_S_arr>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_S_df
            obj: <function test_calc_S_df at 0x7f9b7a06d160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_S_df>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_x_MRIO
            obj: <function test_calc_x_MRIO at 0x7f9b7a06d1f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b460>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_x_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_A_MRIO
            obj: <function test_calc_A_MRIO at 0x7f9b7a06d280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_A_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_L_MRIO
            obj: <function test_calc_L_MRIO at 0x7f9b7a06d310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b460>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_L_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_S_MRIO
            obj: <function test_calc_S_MRIO at 0x7f9b7a06d3a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11bf70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_S_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_S_Y_MRIO
            obj: <function test_calc_S_Y_MRIO at 0x7f9b7a06d430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a07b9a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_S_Y_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_F_Y_MRIO
            obj: <function test_calc_F_Y_MRIO at 0x7f9b7a06d4c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a07bac0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_F_Y_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_M_MRIO
            obj: <function test_calc_M_MRIO at 0x7f9b7a06d550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a07b9a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_M_MRIO>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_math.py>
            name: test_calc_accounts_MRIO
            obj: <function test_calc_accounts_MRIO at 0x7f9b7a06d5e0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a07b9a0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_calc_accounts_MRIO>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_math.py' lenresult=22 outcome='passed'> [hook]
    genitems <Function test_calc_x_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_x_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_x_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_x_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_Z_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_Z_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_Z_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_Z_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_A_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_A_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_A_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_A_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_L_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_L_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_L_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_L_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_x_from_L_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_x_from_L_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_x_from_L_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_x_from_L_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_F_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_F_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_F_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_F_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_S_arr> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_S_arr>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_S_df> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_S_df>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_x_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_x_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_A_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_A_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_L_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_L_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_S_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_S_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_S_Y_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_S_Y_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_F_Y_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_F_Y_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_M_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_M_MRIO>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_calc_accounts_MRIO> [collection]
      pytest_itemcollected [hook]
          item: <Function test_calc_accounts_MRIO>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_math.py' lenresult=22 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_outputs.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_outputs.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_outputs.py>
      find_module called for: test_outputs [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_outputs.py' [assertion]
      found cached rewritten pyc for /home/konstans/proj/pymrio/tests/test_outputs.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: TESTPATH
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: pymrio
            obj: <module 'pymrio' from '/home/konstans/proj/pymrio/tests/../pymrio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: fix_testmrio_calc
            obj: <function fix_testmrio_calc at 0x7f9b7a06d940>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: test_graphs_totals
            obj: <function test_graphs_totals at 0x7f9b7a06d9d0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b9d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_graphs_totals>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: test_graphs_population_sector
            obj: <function test_graphs_population_sector at 0x7f9b7a06da60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_graphs_population_sector>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_outputs.py>
            name: test_graphs_population_total
            obj: <function test_graphs_population_total at 0x7f9b7a06daf0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a11b9d0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_graphs_population_total>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_outputs.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_graphs_totals> [collection]
      pytest_itemcollected [hook]
          item: <Function test_graphs_totals>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_graphs_population_sector> [collection]
      pytest_itemcollected [hook]
          item: <Function test_graphs_population_sector>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_graphs_population_total> [collection]
      pytest_itemcollected [hook]
          item: <Function test_graphs_population_total>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_outputs.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_parsers.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_parsers.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_parsers.py>
      find_module called for: test_parsers [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_parsers.py' [assertion]
      found cached rewritten pyc for /home/konstans/proj/pymrio/tests/test_parsers.py [assertion]
      early skip of rewriting module: pandas.util.testing [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: __warningregistry__
            obj: {'version': 94, ('pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.', <class 'FutureWarning'>, 6): True}
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: pdt
            obj: <module 'pandas.util.testing' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/pandas/util/testing.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: np
            obj: <module 'numpy' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: testpath
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: pymrio
            obj: <module 'pymrio' from '/home/konstans/proj/pymrio/tests/../pymrio/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: fix_testmrio_calc
            obj: <function fix_testmrio_calc at 0x7f9b7a0800d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_parse_exio1
            obj: <function test_parse_exio1 at 0x7f9b7a080160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05f640>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_exio1>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_parse_exio2
            obj: <function test_parse_exio2 at 0x7f9b7a0801f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05fb50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_exio2>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_parse_exio3
            obj: <function test_parse_exio3 at 0x7f9b7a080280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05fdc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_exio3>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_parse_exio_ext
            obj: <function test_parse_exio_ext at 0x7f9b7a080310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05ff70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_exio_ext>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_parse_wiod
            obj: <function test_parse_wiod at 0x7f9b7a0803a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05fdc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_wiod>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_oecd_2016
            obj: <function test_oecd_2016 at 0x7f9b7a080430>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05ff70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_oecd_2016>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_oecd_2018
            obj: <function test_oecd_2018 at 0x7f9b7a0804c0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05fdc0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_oecd_2018>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_parsers.py>
            name: test_parse_eora26
            obj: <function test_parse_eora26 at 0x7f9b7a080550>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a05ff70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_parse_eora26>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_parsers.py' lenresult=8 outcome='passed'> [hook]
    genitems <Function test_parse_exio1> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_exio1>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_exio2> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_exio2>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_exio3> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_exio3>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_exio_ext> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_exio_ext>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_wiod> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_wiod>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_oecd_2016> [collection]
      pytest_itemcollected [hook]
          item: <Function test_oecd_2016>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_oecd_2018> [collection]
      pytest_itemcollected [hook]
          item: <Function test_oecd_2018>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_parse_eora26> [collection]
      pytest_itemcollected [hook]
          item: <Function test_parse_eora26>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_parsers.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_util.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_util.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_util.py>
      find_module called for: test_util [assertion]
      matched test file '/home/konstans/proj/pymrio/tests/test_util.py' [assertion]
      found cached rewritten pyc for /home/konstans/proj/pymrio/tests/test_util.py [assertion]
      early skip of rewriting module: unittest.mock [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from '/home/konstans/.local/lib/python3.8/site-packages/_pytest/assertion/rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: os
            obj: <module 'os' from '/home/konstans/bin/anaconda3/lib/python3.8/os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: np
            obj: <module 'numpy' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: npt
            obj: <module 'numpy.testing' from '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/numpy/testing/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: mock_open
            obj: <function mock_open at 0x7f9b7a143c10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: patch
            obj: <function patch at 0x7f9b7a13e5e0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: namedtuple
            obj: <function namedtuple at 0x7f9b8eeeda60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: pytest
            obj: <module 'pytest' from '/home/konstans/.local/lib/python3.8/site-packages/pytest/__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: TESTPATH
            obj: /home/konstans/proj/pymrio/tests
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: find_first_number
            obj: <function find_first_number at 0x7f9b8c6adb80>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: sniff_csv_format
            obj: <function sniff_csv_format at 0x7f9b8c6adc10>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: build_agg_matrix
            obj: <function build_agg_matrix at 0x7f9b8c6ad8b0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: build_agg_vec
            obj: <function build_agg_vec at 0x7f9b8c6adaf0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: set_block
            obj: <function set_block at 0x7f9b8c6ad9d0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: csv_test_files_content
            obj: <function csv_test_files_content at 0x7f9b7a143ee0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: test_find_first_number
            obj: <function test_find_first_number at 0x7f9b7a144160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a085f70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_find_first_number>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: test_dev_read
            obj: <function test_dev_read at 0x7f9b7a1441f0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a085e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dev_read>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: test_build_agg_matrix
            obj: <function test_build_agg_matrix at 0x7f9b7a144280>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a085f70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_build_agg_matrix>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: test_build_agg_vec
            obj: <function test_build_agg_vec at 0x7f9b7a144310>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a085e80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_build_agg_vec>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_util.py>
            name: test_set_block
            obj: <function test_set_block at 0x7f9b7a1443a0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x7f9b7a085f70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_set_block>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_util.py' lenresult=5 outcome='passed'> [hook]
    genitems <Function test_find_first_number> [collection]
      pytest_itemcollected [hook]
          item: <Function test_find_first_number>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dev_read> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dev_read>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_build_agg_matrix> [collection]
      pytest_itemcollected [hook]
          item: <Function test_build_agg_matrix>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_build_agg_vec> [collection]
      pytest_itemcollected [hook]
          item: <Function test_build_agg_vec>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_set_block> [collection]
      pytest_itemcollected [hook]
          item: <Function test_set_block>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_util.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          items: [<Function test_aggreation_regions>, <Function test_numerical_aggreation_sectors>, <Function test_wrong_inputs>, <Function test_total_agg>, <Function test_underdefined_agg>, <Function test_copy>, <Function test_get_index>, <Function test_set_index>, <Function test_get_sectors>, <Function test_get_regions>, <Function test_get_Y_categories>, <Function test_rename_regions>, <Function test_rename_sectors>, <Function test_rename_Ycat>, <Function test_copy_and_extensions>, <Function test_get_row_data>, <Function test_diag_stressor>, <Function test_reset_to_flows>, <Function test_reset_all_to_flows>, <Function test_reset_full>, <Function test_reset_all_full>, <Function test_reset_to_coefficients>, <Function test_all>, <Function test_fileio>, <Function test_reports>, <Function test_calc_x_df>, <Function test_calc_x_arr>, <Function test_calc_Z_df>, <Function test_calc_Z_arr>, <Function test_calc_A_df>, <Function test_calc_A_arr>, <Function test_calc_L_df>, <Function test_calc_L_arr>, <Function test_calc_x_from_L_df>, <Function test_calc_x_from_L_arr>, <Function test_calc_F_arr>, <Function test_calc_F_df>, <Function test_calc_S_arr>, <Function test_calc_S_df>, <Function test_calc_x_MRIO>, <Function test_calc_A_MRIO>, <Function test_calc_L_MRIO>, <Function test_calc_S_MRIO>, <Function test_calc_S_Y_MRIO>, <Function test_calc_F_Y_MRIO>, <Function test_calc_M_MRIO>, <Function test_calc_accounts_MRIO>, <Function test_graphs_totals>, <Function test_graphs_population_sector>, <Function test_graphs_population_total>, <Function test_parse_exio1>, <Function test_parse_exio2>, <Function test_parse_exio3>, <Function test_parse_exio_ext>, <Function test_parse_wiod>, <Function test_oecd_2016>, <Function test_oecd_2018>, <Function test_parse_eora26>, <Function test_find_first_number>, <Function test_dev_read>, <Function test_build_agg_matrix>, <Function test_build_agg_vec>, <Function test_set_block>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
            startdir: /home/konstans/proj/pymrio
            items: [<Function test_aggreation_regions>, <Function test_numerical_aggreation_sectors>, <Function test_wrong_inputs>, <Function test_total_agg>, <Function test_underdefined_agg>, <Function test_copy>, <Function test_get_index>, <Function test_set_index>, <Function test_get_sectors>, <Function test_get_regions>, <Function test_get_Y_categories>, <Function test_rename_regions>, <Function test_rename_sectors>, <Function test_rename_Ycat>, <Function test_copy_and_extensions>, <Function test_get_row_data>, <Function test_diag_stressor>, <Function test_reset_to_flows>, <Function test_reset_all_to_flows>, <Function test_reset_full>, <Function test_reset_all_full>, <Function test_reset_to_coefficients>, <Function test_all>, <Function test_fileio>, <Function test_reports>, <Function test_calc_x_df>, <Function test_calc_x_arr>, <Function test_calc_Z_df>, <Function test_calc_Z_arr>, <Function test_calc_A_df>, <Function test_calc_A_arr>, <Function test_calc_L_df>, <Function test_calc_L_arr>, <Function test_calc_x_from_L_df>, <Function test_calc_x_from_L_arr>, <Function test_calc_F_arr>, <Function test_calc_F_df>, <Function test_calc_S_arr>, <Function test_calc_S_df>, <Function test_calc_x_MRIO>, <Function test_calc_A_MRIO>, <Function test_calc_L_MRIO>, <Function test_calc_S_MRIO>, <Function test_calc_S_Y_MRIO>, <Function test_calc_F_Y_MRIO>, <Function test_calc_M_MRIO>, <Function test_calc_accounts_MRIO>, <Function test_graphs_totals>, <Function test_graphs_population_sector>, <Function test_graphs_population_total>, <Function test_parse_exio1>, <Function test_parse_exio2>, <Function test_parse_exio3>, <Function test_parse_exio_ext>, <Function test_parse_wiod>, <Function test_oecd_2016>, <Function test_oecd_2018>, <Function test_parse_eora26>, <Function test_find_first_number>, <Function test_dev_read>, <Function test_build_agg_matrix>, <Function test_build_agg_vec>, <Function test_set_block>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
      pytest_warning_captured [hook]
          warning_message: {message : FutureWarning('pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.'), category : 'FutureWarning', filename : '/home/konstans/proj/pymrio/tests/test_parsers.py', lineno : 6, line : None}
          when: collect
          item: None
          location: None
      finish pytest_warning_captured --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : FutureWarning('pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.'), category : 'FutureWarning', filename : '/home/konstans/proj/pymrio/tests/test_parsers.py', lineno : 6, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session pymrio exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=63>
      pytest_runtest_protocol [hook]
          item: <Function test_aggreation_regions>
          nextitem: <Function test_numerical_aggreation_sectors>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_aggregation.py::test_aggreation_regions
            location: ('tests/test_aggregation.py', 20, 'test_aggreation_regions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_aggreation_regions>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggreation_regions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_aggreation_regions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_aggreation_regions>
          early skip of rewriting module: pandas.core.computation.expressions [assertion]
          early skip of rewriting module: pandas.core.computation.check [assertion]
          early skip of rewriting module: numexpr [assertion]
          early skip of rewriting module: numexpr.__config__ [assertion]
          early skip of rewriting module: numexpr.expressions [assertion]
          early skip of rewriting module: numexpr.interpreter [assertion]
          early skip of rewriting module: numexpr.necompiler [assertion]
          early skip of rewriting module: numexpr.utils [assertion]
          early skip of rewriting module: numexpr.version [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggreation_regions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_aggreation_regions>
            nextitem: <Function test_numerical_aggreation_sectors>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggreation_regions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_aggreation_regions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_aggregation.py::test_aggreation_regions
            location: ('tests/test_aggregation.py', 20, 'test_aggreation_regions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_numerical_aggreation_sectors>
          nextitem: <Function test_wrong_inputs>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_aggregation.py::test_numerical_aggreation_sectors
            location: ('tests/test_aggregation.py', 80, 'test_numerical_aggreation_sectors')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_numerical_aggreation_sectors>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numerical_aggreation_sectors>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_numerical_aggreation_sectors>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_numerical_aggreation_sectors>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numerical_aggreation_sectors>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_numerical_aggreation_sectors>
            nextitem: <Function test_wrong_inputs>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_numerical_aggreation_sectors>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_numerical_aggreation_sectors' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_aggregation.py::test_numerical_aggreation_sectors
            location: ('tests/test_aggregation.py', 80, 'test_numerical_aggreation_sectors')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_wrong_inputs>
          nextitem: <Function test_total_agg>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_aggregation.py::test_wrong_inputs
            location: ('tests/test_aggregation.py', 104, 'test_wrong_inputs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_wrong_inputs>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_wrong_inputs>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_wrong_inputs>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_wrong_inputs>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_wrong_inputs>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_wrong_inputs>
            nextitem: <Function test_total_agg>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_wrong_inputs>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_wrong_inputs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_aggregation.py::test_wrong_inputs
            location: ('tests/test_aggregation.py', 104, 'test_wrong_inputs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_total_agg>
          nextitem: <Function test_underdefined_agg>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_aggregation.py::test_total_agg
            location: ('tests/test_aggregation.py', 134, 'test_total_agg')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_total_agg>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_total_agg>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_total_agg' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_total_agg' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_total_agg' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_total_agg>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_total_agg>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_total_agg>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_total_agg' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_total_agg' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_total_agg' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_total_agg>
            nextitem: <Function test_underdefined_agg>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_total_agg>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_total_agg' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_total_agg' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_total_agg' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_aggregation.py::test_total_agg
            location: ('tests/test_aggregation.py', 134, 'test_total_agg')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_underdefined_agg>
          nextitem: <Function test_copy>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_aggregation.py::test_underdefined_agg
            location: ('tests/test_aggregation.py', 145, 'test_underdefined_agg')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_underdefined_agg>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_underdefined_agg>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_underdefined_agg>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_underdefined_agg>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_underdefined_agg>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_underdefined_agg>
            nextitem: <Function test_copy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_underdefined_agg>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_aggregation.py::test_underdefined_agg' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_aggregation.py::test_underdefined_agg
            location: ('tests/test_aggregation.py', 145, 'test_underdefined_agg')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_copy>
          nextitem: <Function test_get_index>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_copy
            location: ('tests/test_core.py', 45, 'test_copy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_copy>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_copy>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_copy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_copy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_copy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_copy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_copy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_copy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_copy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_copy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_copy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_copy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_copy>
            nextitem: <Function test_get_index>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_copy>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_copy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_copy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_copy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_copy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_copy
            location: ('tests/test_core.py', 45, 'test_copy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_index>
          nextitem: <Function test_set_index>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_get_index
            location: ('tests/test_core.py', 63, 'test_get_index')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_index>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_index>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_index>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_index' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_index' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_index' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_index>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_index>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_index>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_index' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_index' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_index' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_index>
            nextitem: <Function test_set_index>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_index>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_index>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_index' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_index' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_index' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_get_index
            location: ('tests/test_core.py', 63, 'test_get_index')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_set_index>
          nextitem: <Function test_get_sectors>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_set_index
            location: ('tests/test_core.py', 94, 'test_set_index')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_set_index>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_set_index>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set_index>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_set_index' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_set_index' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_set_index' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_set_index>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_set_index>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set_index>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_set_index' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_set_index' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_set_index' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_set_index>
            nextitem: <Function test_get_sectors>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_set_index>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set_index>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_set_index' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_set_index' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_set_index' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_set_index
            location: ('tests/test_core.py', 94, 'test_set_index')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_sectors>
          nextitem: <Function test_get_regions>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_get_sectors
            location: ('tests/test_core.py', 102, 'test_get_sectors')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_sectors>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_sectors>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_sectors>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_sectors' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_sectors' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_sectors' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_sectors>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_sectors>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_sectors>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_sectors' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_sectors' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_sectors' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_sectors>
            nextitem: <Function test_get_regions>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_sectors>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_sectors>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_sectors' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_sectors' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_sectors' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_get_sectors
            location: ('tests/test_core.py', 102, 'test_get_sectors')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_regions>
          nextitem: <Function test_get_Y_categories>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_get_regions
            location: ('tests/test_core.py', 116, 'test_get_regions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_regions>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_regions>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_regions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_regions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_regions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_regions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_regions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_regions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_regions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_regions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_regions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_regions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_regions>
            nextitem: <Function test_get_Y_categories>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_regions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_regions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_regions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_regions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_regions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_get_regions
            location: ('tests/test_core.py', 116, 'test_get_regions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_Y_categories>
          nextitem: <Function test_rename_regions>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_get_Y_categories
            location: ('tests/test_core.py', 126, 'test_get_Y_categories')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_Y_categories>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_Y_categories>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_Y_categories>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_Y_categories' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_Y_categories' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_Y_categories' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_Y_categories>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_Y_categories>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_Y_categories>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_Y_categories' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_Y_categories' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_Y_categories' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_Y_categories>
            nextitem: <Function test_rename_regions>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_Y_categories>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_Y_categories>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_Y_categories' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_Y_categories' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_Y_categories' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_get_Y_categories
            location: ('tests/test_core.py', 126, 'test_get_Y_categories')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_rename_regions>
          nextitem: <Function test_rename_sectors>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_rename_regions
            location: ('tests/test_core.py', 136, 'test_rename_regions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_rename_regions>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_rename_regions>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_regions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_regions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_regions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_regions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_rename_regions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_rename_regions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_regions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_regions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_regions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_regions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_rename_regions>
            nextitem: <Function test_rename_sectors>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_rename_regions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_regions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_regions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_regions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_regions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_rename_regions
            location: ('tests/test_core.py', 136, 'test_rename_regions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_rename_sectors>
          nextitem: <Function test_rename_Ycat>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_rename_sectors
            location: ('tests/test_core.py', 146, 'test_rename_sectors')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_rename_sectors>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_rename_sectors>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_sectors>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_sectors' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_sectors' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_sectors' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_rename_sectors>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_rename_sectors>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_sectors>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_sectors' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_sectors' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_sectors' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_rename_sectors>
            nextitem: <Function test_rename_Ycat>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_rename_sectors>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_sectors>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_sectors' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_sectors' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_sectors' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_rename_sectors
            location: ('tests/test_core.py', 146, 'test_rename_sectors')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_rename_Ycat>
          nextitem: <Function test_copy_and_extensions>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_rename_Ycat
            location: ('tests/test_core.py', 156, 'test_rename_Ycat')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_rename_Ycat>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_rename_Ycat>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_Ycat>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_Ycat' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_Ycat' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_Ycat' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_rename_Ycat>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_rename_Ycat>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_Ycat>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_Ycat' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_Ycat' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_Ycat' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_rename_Ycat>
            nextitem: <Function test_copy_and_extensions>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_rename_Ycat>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_rename_Ycat>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_rename_Ycat' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_rename_Ycat' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_rename_Ycat' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_rename_Ycat
            location: ('tests/test_core.py', 156, 'test_rename_Ycat')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_copy_and_extensions>
          nextitem: <Function test_get_row_data>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_copy_and_extensions
            location: ('tests/test_core.py', 167, 'test_copy_and_extensions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_copy_and_extensions>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_copy_and_extensions>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_copy_and_extensions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_copy_and_extensions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_copy_and_extensions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_copy_and_extensions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_copy_and_extensions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_copy_and_extensions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_copy_and_extensions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_copy_and_extensions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_copy_and_extensions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_copy_and_extensions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_copy_and_extensions>
            nextitem: <Function test_get_row_data>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_copy_and_extensions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_copy_and_extensions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_copy_and_extensions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_copy_and_extensions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_copy_and_extensions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_copy_and_extensions
            location: ('tests/test_core.py', 167, 'test_copy_and_extensions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_get_row_data>
          nextitem: <Function test_diag_stressor>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_get_row_data
            location: ('tests/test_core.py', 177, 'test_get_row_data')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_get_row_data>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_row_data>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_row_data>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_row_data' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_row_data' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_row_data' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_get_row_data>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_get_row_data>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_row_data>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_row_data' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_row_data' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_row_data' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_get_row_data>
            nextitem: <Function test_diag_stressor>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_get_row_data>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_get_row_data>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_get_row_data' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_get_row_data' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_get_row_data' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_get_row_data
            location: ('tests/test_core.py', 177, 'test_get_row_data')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_diag_stressor>
          nextitem: <Function test_reset_to_flows>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_diag_stressor
            location: ('tests/test_core.py', 188, 'test_diag_stressor')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_diag_stressor>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_diag_stressor>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_diag_stressor>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_diag_stressor' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_diag_stressor' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_diag_stressor' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_diag_stressor>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_diag_stressor>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_diag_stressor>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_diag_stressor' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_diag_stressor' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_diag_stressor' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_diag_stressor>
            nextitem: <Function test_reset_to_flows>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_diag_stressor>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_diag_stressor>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_diag_stressor' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_diag_stressor' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_diag_stressor' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_diag_stressor
            location: ('tests/test_core.py', 188, 'test_diag_stressor')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reset_to_flows>
          nextitem: <Function test_reset_all_to_flows>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_reset_to_flows
            location: ('tests/test_core.py', 202, 'test_reset_to_flows')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reset_to_flows>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_to_flows>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_to_flows>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_to_flows' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_to_flows' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_to_flows' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reset_to_flows>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reset_to_flows>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_to_flows>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_to_flows' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_to_flows' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_to_flows' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reset_to_flows>
            nextitem: <Function test_reset_all_to_flows>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_to_flows>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_to_flows>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_to_flows' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_to_flows' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_to_flows' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_reset_to_flows
            location: ('tests/test_core.py', 202, 'test_reset_to_flows')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reset_all_to_flows>
          nextitem: <Function test_reset_full>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_reset_all_to_flows
            location: ('tests/test_core.py', 215, 'test_reset_all_to_flows')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reset_all_to_flows>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_all_to_flows>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_all_to_flows>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reset_all_to_flows>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reset_all_to_flows>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_all_to_flows>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reset_all_to_flows>
            nextitem: <Function test_reset_full>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_all_to_flows>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_all_to_flows>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_all_to_flows' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_reset_all_to_flows
            location: ('tests/test_core.py', 215, 'test_reset_all_to_flows')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reset_full>
          nextitem: <Function test_reset_all_full>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_reset_full
            location: ('tests/test_core.py', 229, 'test_reset_full')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reset_full>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_full>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_full>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_full' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_full' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_full' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reset_full>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reset_full>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_full>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_full' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_full' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_full' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reset_full>
            nextitem: <Function test_reset_all_full>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_full>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_full>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_full' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_full' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_full' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_reset_full
            location: ('tests/test_core.py', 229, 'test_reset_full')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reset_all_full>
          nextitem: <Function test_reset_to_coefficients>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_reset_all_full
            location: ('tests/test_core.py', 242, 'test_reset_all_full')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reset_all_full>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_all_full>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_all_full>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_all_full' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_all_full' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_all_full' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reset_all_full>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reset_all_full>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_all_full>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_all_full' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_all_full' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_all_full' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reset_all_full>
            nextitem: <Function test_reset_to_coefficients>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_all_full>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_all_full>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_all_full' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_all_full' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_all_full' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_reset_all_full
            location: ('tests/test_core.py', 242, 'test_reset_all_full')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reset_to_coefficients>
          nextitem: <Function test_all>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_core.py::test_reset_to_coefficients
            location: ('tests/test_core.py', 258, 'test_reset_to_coefficients')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reset_to_coefficients>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_to_coefficients>>
          finish pytest_fixture_setup --> <class 'test_core.fix_testmrio.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_to_coefficients>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reset_to_coefficients>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reset_to_coefficients>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_to_coefficients>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reset_to_coefficients>
            nextitem: <Function test_all>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio' scope='function' baseid='tests/test_core.py'>
              request: <SubRequest 'fix_testmrio' for <Function test_reset_to_coefficients>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reset_to_coefficients>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_core.py::test_reset_to_coefficients' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_core.py::test_reset_to_coefficients
            location: ('tests/test_core.py', 258, 'test_reset_to_coefficients')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_all>
          nextitem: <Function test_fileio>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_integration.py::test_all
            location: ('tests/test_integration.py', 36, 'test_all')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_all>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_testmrio' scope='function' baseid='tests/test_integration.py'>
              request: <SubRequest 'td_testmrio' for <Function test_all>>
          finish pytest_fixture_setup --> <class 'test_integration.td_testmrio.<locals>.results'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_all>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_all' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_all' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_all' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_all>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_all>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_all>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_all' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_all' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_all' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_all>
            nextitem: <Function test_fileio>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_testmrio' scope='function' baseid='tests/test_integration.py'>
              request: <SubRequest 'td_testmrio' for <Function test_all>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_all>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_all' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_all' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_all' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_integration.py::test_all
            location: ('tests/test_integration.py', 36, 'test_all')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_fileio>
          nextitem: <Function test_reports>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_integration.py::test_fileio
            location: ('tests/test_integration.py', 61, 'test_fileio')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_fileio>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_fileio>>
          finish pytest_fixture_setup --> TempPathFactory(_given_basetemp=None, _trace=<pluggy._tracing.TagTracerSub object at 0x7f9b8dbd6a00>, _basetemp=None) [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_fileio>>
          early skip of rewriting module: getpass [assertion]
          early skip of rewriting module: termios [assertion]
          new basetemp /tmp/pytest-of-konstans/pytest-5 [config:tmpdir]
          mktemp /tmp/pytest-of-konstans/pytest-5/test_fileio0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-konstans/pytest-5/test_fileio0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_fileio>>
          finish pytest_fixture_setup --> /tmp/pytest-of-konstans/pytest-5/test_fileio0 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_fileio>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_fileio' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_fileio' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_fileio' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_fileio>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_fileio>
          early skip of rewriting module: pandas.io.formats.csvs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: encodings.cp437 [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_fileio>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_fileio' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_fileio' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_fileio' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_fileio>
            nextitem: <Function test_reports>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_fileio>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_fileio>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_fileio>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_fileio>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_fileio' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_fileio' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_fileio' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_integration.py::test_fileio
            location: ('tests/test_integration.py', 61, 'test_fileio')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reports>
          nextitem: <Function test_calc_x_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_integration.py::test_reports
            location: ('tests/test_integration.py', 131, 'test_reports')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reports>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_reports>>
          mktemp /tmp/pytest-of-konstans/pytest-5/test_reports0 [config:tmpdir]
          finish pytest_fixture_setup --> /tmp/pytest-of-konstans/pytest-5/test_reports0 [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_reports>>
          finish pytest_fixture_setup --> /tmp/pytest-of-konstans/pytest-5/test_reports0 [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reports>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_reports' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_reports' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_reports' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reports>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reports>
          early skip of rewriting module: pandas.plotting._matplotlib [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.boxplot [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.core [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.compat [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.converter [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.style [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.tools [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.hist [assertion]
          early skip of rewriting module: pandas.plotting._matplotlib.misc [assertion]
          early skip of rewriting module: PyQt5.QtX11Extras [assertion]
          early skip of rewriting module: matplotlib._png [assertion]
          early skip of rewriting module: docutils [assertion]
          early skip of rewriting module: docutils.core [assertion]
          early skip of rewriting module: docutils.frontend [assertion]
          early skip of rewriting module: docutils.utils [assertion]
          early skip of rewriting module: docutils.nodes [assertion]
          early skip of rewriting module: docutils.io [assertion]
          early skip of rewriting module: docutils.utils.error_reporting [assertion]
          early skip of rewriting module: docutils.readers [assertion]
          early skip of rewriting module: docutils.parsers [assertion]
          early skip of rewriting module: docutils.transforms [assertion]
          early skip of rewriting module: docutils.languages [assertion]
          early skip of rewriting module: docutils.transforms.universal [assertion]
          early skip of rewriting module: docutils.utils.smartquotes [assertion]
          early skip of rewriting module: docutils.writers [assertion]
          early skip of rewriting module: docutils.readers.doctree [assertion]
          early skip of rewriting module: docutils.readers.standalone [assertion]
          early skip of rewriting module: docutils.transforms.frontmatter [assertion]
          early skip of rewriting module: docutils.transforms.references [assertion]
          early skip of rewriting module: docutils.transforms.misc [assertion]
          early skip of rewriting module: docutils.parsers.rst [assertion]
          early skip of rewriting module: docutils.statemachine [assertion]
          early skip of rewriting module: docutils.parsers.rst.roles [assertion]
          early skip of rewriting module: docutils.parsers.rst.directives [assertion]
          early skip of rewriting module: docutils.parsers.rst.languages [assertion]
          early skip of rewriting module: docutils.parsers.rst.languages.en [assertion]
          early skip of rewriting module: docutils.utils.code_analyzer [assertion]
          early skip of rewriting module: pkg_resources [assertion]
          early skip of rewriting module: pkgutil [assertion]
          early skip of rewriting module: plistlib [assertion]
          early skip of rewriting module: xml.parsers [assertion]
          early skip of rewriting module: xml.parsers.expat [assertion]
          early skip of rewriting module: pkg_resources.extern [assertion]
          early skip of rewriting module: pkg_resources.extern.six [assertion]
          early skip of rewriting module: pkg_resources._vendor [assertion]
          early skip of rewriting module: pkg_resources._vendor.six [assertion]
          early skip of rewriting module: pkg_resources.extern.six.moves [assertion]
          early skip of rewriting module: pkg_resources._vendor.six.moves [assertion]
          early skip of rewriting module: pkg_resources.extern.appdirs [assertion]
          early skip of rewriting module: pkg_resources._vendor.appdirs [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging [assertion]
          early skip of rewriting module: pkg_resources._vendor.packaging.__about__ [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.version [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging._structures [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.specifiers [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging._compat [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.requirements [assertion]
          early skip of rewriting module: pkg_resources.extern.pyparsing [assertion]
          early skip of rewriting module: pkg_resources._vendor.pyparsing [assertion]
          early skip of rewriting module: pkg_resources.extern.six.moves.urllib [assertion]
          early skip of rewriting module: pkg_resources._vendor.six.moves.urllib [assertion]
          early skip of rewriting module: pkg_resources.extern.packaging.markers [assertion]
          early skip of rewriting module: sysconfig [assertion]
          early skip of rewriting module: pygments [assertion]
          early skip of rewriting module: pygments.lexers [assertion]
          early skip of rewriting module: pygments.lexers._mapping [assertion]
          early skip of rewriting module: pygments.modeline [assertion]
          early skip of rewriting module: pygments.plugin [assertion]
          early skip of rewriting module: pygments.util [assertion]
          early skip of rewriting module: pygments.formatters [assertion]
          early skip of rewriting module: pygments.formatters._mapping [assertion]
          early skip of rewriting module: pygments.formatters.html [assertion]
          early skip of rewriting module: pygments.formatter [assertion]
          early skip of rewriting module: pygments.styles [assertion]
          early skip of rewriting module: pygments.token [assertion]
          early skip of rewriting module: ctags [assertion]
          early skip of rewriting module: docutils.parsers.rst.states [assertion]
          early skip of rewriting module: docutils.parsers.rst.tableparser [assertion]
          early skip of rewriting module: docutils.utils.punctuation_chars [assertion]
          early skip of rewriting module: docutils.utils.roman [assertion]
          early skip of rewriting module: docutils.utils.urischemes [assertion]
          early skip of rewriting module: docutils.writers.html4css1 [assertion]
          early skip of rewriting module: docutils.transforms.writer_aux [assertion]
          early skip of rewriting module: docutils.writers._html_base [assertion]
          early skip of rewriting module: docutils.utils.math [assertion]
          early skip of rewriting module: docutils.utils.math.unichar2tex [assertion]
          early skip of rewriting module: docutils.utils.math.math2html [assertion]
          early skip of rewriting module: docutils.utils.math.latex2mathml [assertion]
          early skip of rewriting module: docutils.utils.math.tex2unichar [assertion]
          early skip of rewriting module: docutils.utils.math.tex2mathml_extern [assertion]
          early skip of rewriting module: docutils.parsers.rst.directives.parts [assertion]
          early skip of rewriting module: docutils.transforms.parts [assertion]
          early skip of rewriting module: docutils.languages.en [assertion]
          early skip of rewriting module: docutils.parsers.rst.directives.images [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reports>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_reports' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_reports' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_reports' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reports>
            nextitem: <Function test_calc_x_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_reports>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmpdir' scope='function' baseid=''>
              request: <SubRequest 'tmpdir' for <Function test_reports>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_reports>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reports>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_reports' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_reports' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_reports' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_integration.py::test_reports
            location: ('tests/test_integration.py', 131, 'test_reports')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_x_df>
          nextitem: <Function test_calc_x_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_x_df
            location: ('tests/test_math.py', 290, 'test_calc_x_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_x_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_x_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_x_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_x_df>
            nextitem: <Function test_calc_x_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_x_df
            location: ('tests/test_math.py', 290, 'test_calc_x_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_x_arr>
          nextitem: <Function test_calc_Z_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_x_arr
            location: ('tests/test_math.py', 297, 'test_calc_x_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_x_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_x_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_x_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_x_arr>
            nextitem: <Function test_calc_Z_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_x_arr
            location: ('tests/test_math.py', 297, 'test_calc_x_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_Z_df>
          nextitem: <Function test_calc_Z_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_Z_df
            location: ('tests/test_math.py', 304, 'test_calc_Z_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_Z_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_Z_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_Z_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_Z_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_Z_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_Z_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_Z_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_Z_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_Z_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_Z_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_Z_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_Z_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_Z_df>
            nextitem: <Function test_calc_Z_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_Z_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_Z_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_Z_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_Z_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_Z_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_Z_df
            location: ('tests/test_math.py', 304, 'test_calc_Z_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_Z_arr>
          nextitem: <Function test_calc_A_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_Z_arr
            location: ('tests/test_math.py', 311, 'test_calc_Z_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_Z_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_Z_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_Z_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_Z_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_Z_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_Z_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_Z_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_Z_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_Z_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_Z_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_Z_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_Z_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_Z_arr>
            nextitem: <Function test_calc_A_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_Z_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_Z_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_Z_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_Z_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_Z_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_Z_arr
            location: ('tests/test_math.py', 311, 'test_calc_Z_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_A_df>
          nextitem: <Function test_calc_A_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_A_df
            location: ('tests/test_math.py', 318, 'test_calc_A_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_A_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_A_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_A_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_A_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_A_df>
            nextitem: <Function test_calc_A_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_A_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_A_df
            location: ('tests/test_math.py', 318, 'test_calc_A_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_A_arr>
          nextitem: <Function test_calc_L_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_A_arr
            location: ('tests/test_math.py', 325, 'test_calc_A_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_A_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_A_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_A_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_A_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_A_arr>
            nextitem: <Function test_calc_L_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_A_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_A_arr
            location: ('tests/test_math.py', 325, 'test_calc_A_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_L_df>
          nextitem: <Function test_calc_L_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_L_df
            location: ('tests/test_math.py', 332, 'test_calc_L_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_L_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_L_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_L_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_L_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_L_df>
            nextitem: <Function test_calc_L_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_L_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_L_df
            location: ('tests/test_math.py', 332, 'test_calc_L_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_L_arr>
          nextitem: <Function test_calc_x_from_L_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_L_arr
            location: ('tests/test_math.py', 339, 'test_calc_L_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_L_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_L_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_L_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_L_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_L_arr>
            nextitem: <Function test_calc_x_from_L_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_L_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_L_arr
            location: ('tests/test_math.py', 339, 'test_calc_L_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_x_from_L_df>
          nextitem: <Function test_calc_x_from_L_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_x_from_L_df
            location: ('tests/test_math.py', 347, 'test_calc_x_from_L_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_x_from_L_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_from_L_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_from_L_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_x_from_L_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_x_from_L_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_from_L_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_x_from_L_df>
            nextitem: <Function test_calc_x_from_L_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_from_L_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_from_L_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_from_L_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_x_from_L_df
            location: ('tests/test_math.py', 347, 'test_calc_x_from_L_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_x_from_L_arr>
          nextitem: <Function test_calc_F_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_x_from_L_arr
            location: ('tests/test_math.py', 354, 'test_calc_x_from_L_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_x_from_L_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_from_L_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_from_L_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_x_from_L_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_x_from_L_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_from_L_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_x_from_L_arr>
            nextitem: <Function test_calc_F_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_x_from_L_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_from_L_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_from_L_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_x_from_L_arr
            location: ('tests/test_math.py', 354, 'test_calc_x_from_L_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_F_arr>
          nextitem: <Function test_calc_F_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_F_arr
            location: ('tests/test_math.py', 362, 'test_calc_F_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_F_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_F_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_F_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_F_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_F_arr>
            nextitem: <Function test_calc_F_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_F_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_F_arr
            location: ('tests/test_math.py', 362, 'test_calc_F_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_F_df>
          nextitem: <Function test_calc_S_arr>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_F_df
            location: ('tests/test_math.py', 370, 'test_calc_F_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_F_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_F_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_F_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_F_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_F_df>
            nextitem: <Function test_calc_S_arr>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_F_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_F_df
            location: ('tests/test_math.py', 370, 'test_calc_F_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_S_arr>
          nextitem: <Function test_calc_S_df>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_S_arr
            location: ('tests/test_math.py', 377, 'test_calc_S_arr')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_S_arr>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_S_arr>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_arr>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_arr' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_arr' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_arr' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_S_arr>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_S_arr>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_arr>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_arr' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_arr' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_arr' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_S_arr>
            nextitem: <Function test_calc_S_df>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_S_arr>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_arr>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_arr' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_arr' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_arr' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_S_arr
            location: ('tests/test_math.py', 377, 'test_calc_S_arr')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_S_df>
          nextitem: <Function test_calc_x_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_S_df
            location: ('tests/test_math.py', 385, 'test_calc_S_df')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_S_df>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_S_df>>
          finish pytest_fixture_setup --> <class 'test_math.td_IO_Data_Miller.<locals>.IO_Data_Miller'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_df>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_df' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_df' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_df' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_S_df>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_S_df>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_df>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_df' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_df' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_df' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_S_df>
            nextitem: <Function test_calc_x_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_IO_Data_Miller' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_IO_Data_Miller' for <Function test_calc_S_df>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_df>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_df' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_df' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_df' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_S_df
            location: ('tests/test_math.py', 385, 'test_calc_S_df')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_x_MRIO>
          nextitem: <Function test_calc_A_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_x_MRIO
            location: ('tests/test_math.py', 392, 'test_calc_x_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_x_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_x_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_x_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_x_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_x_MRIO>
            nextitem: <Function test_calc_A_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_x_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_x_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_x_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_x_MRIO
            location: ('tests/test_math.py', 392, 'test_calc_x_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_A_MRIO>
          nextitem: <Function test_calc_L_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_A_MRIO
            location: ('tests/test_math.py', 399, 'test_calc_A_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_A_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_A_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_A_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_A_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_A_MRIO>
            nextitem: <Function test_calc_L_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_A_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_A_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_A_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_A_MRIO
            location: ('tests/test_math.py', 399, 'test_calc_A_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_L_MRIO>
          nextitem: <Function test_calc_S_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_L_MRIO
            location: ('tests/test_math.py', 406, 'test_calc_L_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_L_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_L_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_L_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_L_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_L_MRIO>
            nextitem: <Function test_calc_S_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_L_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_L_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_L_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_L_MRIO
            location: ('tests/test_math.py', 406, 'test_calc_L_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_S_MRIO>
          nextitem: <Function test_calc_S_Y_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_S_MRIO
            location: ('tests/test_math.py', 413, 'test_calc_S_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_S_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_S_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_S_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_S_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_S_MRIO>
            nextitem: <Function test_calc_S_Y_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_S_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_S_MRIO
            location: ('tests/test_math.py', 413, 'test_calc_S_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_S_Y_MRIO>
          nextitem: <Function test_calc_F_Y_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_S_Y_MRIO
            location: ('tests/test_math.py', 420, 'test_calc_S_Y_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_S_Y_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_S_Y_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_Y_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_S_Y_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_S_Y_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_Y_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_S_Y_MRIO>
            nextitem: <Function test_calc_F_Y_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_S_Y_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_S_Y_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_S_Y_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_S_Y_MRIO
            location: ('tests/test_math.py', 420, 'test_calc_S_Y_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_F_Y_MRIO>
          nextitem: <Function test_calc_M_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_F_Y_MRIO
            location: ('tests/test_math.py', 426, 'test_calc_F_Y_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_F_Y_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_F_Y_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_Y_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_F_Y_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_F_Y_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_Y_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_F_Y_MRIO>
            nextitem: <Function test_calc_M_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_F_Y_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_F_Y_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_F_Y_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_F_Y_MRIO
            location: ('tests/test_math.py', 426, 'test_calc_F_Y_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_M_MRIO>
          nextitem: <Function test_calc_accounts_MRIO>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_M_MRIO
            location: ('tests/test_math.py', 433, 'test_calc_M_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_M_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_M_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_M_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_M_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_M_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_M_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_M_MRIO>
            nextitem: <Function test_calc_accounts_MRIO>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_M_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_M_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_M_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_M_MRIO
            location: ('tests/test_math.py', 433, 'test_calc_M_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_calc_accounts_MRIO>
          nextitem: <Function test_graphs_totals>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_math.py::test_calc_accounts_MRIO
            location: ('tests/test_math.py', 440, 'test_calc_accounts_MRIO')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_calc_accounts_MRIO>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_accounts_MRIO>>
          finish pytest_fixture_setup --> <class 'test_math.td_small_MRIO.<locals>.IO_Data'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_accounts_MRIO>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_calc_accounts_MRIO>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_calc_accounts_MRIO>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_accounts_MRIO>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_calc_accounts_MRIO>
            nextitem: <Function test_graphs_totals>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='td_small_MRIO' scope='function' baseid='tests/test_math.py'>
              request: <SubRequest 'td_small_MRIO' for <Function test_calc_accounts_MRIO>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_calc_accounts_MRIO>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_math.py::test_calc_accounts_MRIO' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_math.py::test_calc_accounts_MRIO
            location: ('tests/test_math.py', 440, 'test_calc_accounts_MRIO')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_graphs_totals>
          nextitem: <Function test_graphs_population_sector>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_outputs.py::test_graphs_totals
            location: ('tests/test_outputs.py', 38, 'test_graphs_totals')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_graphs_totals>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_outputs.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_graphs_totals>>
          finish pytest_fixture_setup --> <class 'test_outputs.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_totals>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_totals' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_totals' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_totals' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_graphs_totals>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_graphs_totals>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_totals>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_totals' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_totals' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_totals' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_graphs_totals>
            nextitem: <Function test_graphs_population_sector>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_outputs.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_graphs_totals>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_totals>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_totals' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_totals' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_totals' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_outputs.py::test_graphs_totals
            location: ('tests/test_outputs.py', 38, 'test_graphs_totals')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_graphs_population_sector>
          nextitem: <Function test_graphs_population_total>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_outputs.py::test_graphs_population_sector
            location: ('tests/test_outputs.py', 66, 'test_graphs_population_sector')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_graphs_population_sector>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_outputs.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_graphs_population_sector>>
          finish pytest_fixture_setup --> <class 'test_outputs.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_population_sector>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_graphs_population_sector>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_graphs_population_sector>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_population_sector>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_graphs_population_sector>
            nextitem: <Function test_graphs_population_total>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_outputs.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_graphs_population_sector>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_population_sector>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_population_sector' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_outputs.py::test_graphs_population_sector
            location: ('tests/test_outputs.py', 66, 'test_graphs_population_sector')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_graphs_population_total>
          nextitem: <Function test_parse_exio1>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_outputs.py::test_graphs_population_total
            location: ('tests/test_outputs.py', 93, 'test_graphs_population_total')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_graphs_population_total>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_outputs.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_graphs_population_total>>
          finish pytest_fixture_setup --> <class 'test_outputs.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_population_total>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_graphs_population_total>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_graphs_population_total>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_population_total>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_graphs_population_total>
            nextitem: <Function test_parse_exio1>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_outputs.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_graphs_population_total>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_graphs_population_total>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_outputs.py::test_graphs_population_total' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_outputs.py::test_graphs_population_total
            location: ('tests/test_outputs.py', 93, 'test_graphs_population_total')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_exio1>
          nextitem: <Function test_parse_exio2>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_parse_exio1
            location: ('tests/test_parsers.py', 30, 'test_parse_exio1')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_exio1>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_exio1>>
          finish pytest_fixture_setup --> <class 'test_parsers.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio1>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio1' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio1' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio1' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_exio1>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_exio1>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio1>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio1' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio1' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio1' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_exio1>
            nextitem: <Function test_parse_exio2>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_exio1>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio1>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio1' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio1' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio1' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_parse_exio1
            location: ('tests/test_parsers.py', 30, 'test_parse_exio1')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_exio2>
          nextitem: <Function test_parse_exio3>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_parse_exio2
            location: ('tests/test_parsers.py', 51, 'test_parse_exio2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_exio2>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_exio2>>
          finish pytest_fixture_setup --> <class 'test_parsers.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_exio2>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_exio2>
          early skip of rewriting module: xlrd [assertion]
          early skip of rewriting module: xlrd.timemachine [assertion]
          early skip of rewriting module: xlrd.biffh [assertion]
          early skip of rewriting module: xlrd.book [assertion]
          early skip of rewriting module: xlrd.compdoc [assertion]
          early skip of rewriting module: xlrd.formatting [assertion]
          early skip of rewriting module: xlrd.sheet [assertion]
          early skip of rewriting module: xlrd.formula [assertion]
          early skip of rewriting module: xlrd.info [assertion]
          early skip of rewriting module: xlrd.xldate [assertion]
          early skip of rewriting module: xlrd.xlsx [assertion]
          early skip of rewriting module: defusedxml [assertion]
          early skip of rewriting module: defusedxml.common [assertion]
          early skip of rewriting module: defusedxml.cElementTree [assertion]
          early skip of rewriting module: xml.etree.cElementTree [assertion]
          early skip of rewriting module: defusedxml.ElementTree [assertion]
          early skip of rewriting module: xml.etree.ElementTree [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_exio2>
            nextitem: <Function test_parse_exio3>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_exio2>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_parse_exio2
            location: ('tests/test_parsers.py', 51, 'test_parse_exio2')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_exio2>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_exio2
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_exio3>
          nextitem: <Function test_parse_exio_ext>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_parse_exio3
            location: ('tests/test_parsers.py', 79, 'test_parse_exio3')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_exio3>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_exio3>>
          finish pytest_fixture_setup --> <class 'test_parsers.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio3>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio3' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio3' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio3' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_exio3>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_exio3>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio3>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio3' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio3' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio3' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_exio3>
            nextitem: <Function test_parse_exio_ext>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_exio3>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio3>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio3' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio3' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio3' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_parse_exio3
            location: ('tests/test_parsers.py', 79, 'test_parse_exio3')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_exio_ext>
          nextitem: <Function test_parse_wiod>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_parse_exio_ext
            location: ('tests/test_parsers.py', 96, 'test_parse_exio_ext')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_exio_ext>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio_ext>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_exio_ext>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_exio_ext>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio_ext>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_exio_ext>
            nextitem: <Function test_parse_wiod>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_exio_ext>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_exio_ext' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_parse_exio_ext
            location: ('tests/test_parsers.py', 96, 'test_parse_exio_ext')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_wiod>
          nextitem: <Function test_oecd_2016>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_parse_wiod
            location: ('tests/test_parsers.py', 139, 'test_parse_wiod')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_wiod>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_wiod>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_wiod' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_wiod' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_wiod' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_wiod>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_wiod>
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: pandas.core.apply [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: encodings.utf_16_le [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          early skip of rewriting module: s3fs [assertion]
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_wiod>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_wiod' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_wiod' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_wiod' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_wiod>
            nextitem: <Function test_oecd_2016>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_wiod>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_wiod' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_wiod' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_wiod' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_parse_wiod
            location: ('tests/test_parsers.py', 139, 'test_parse_wiod')
        finish pytest_runtest_logfinish --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 312, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
        pytest_warning_captured [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            when: runtest
            item: <Function test_parse_wiod>
            location: None
        finish pytest_warning_captured --> [] [hook]
        pytest_warning_recorded [hook]
            warning_message: {message : DeprecationWarning("This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead."), category : 'DeprecationWarning', filename : '/home/konstans/bin/anaconda3/lib/python3.8/site-packages/xlrd/xlsx.py', lineno : 266, line : None}
            nodeid: tests/test_parsers.py::test_parse_wiod
            when: runtest
            location: None
        finish pytest_warning_recorded --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_oecd_2016>
          nextitem: <Function test_oecd_2018>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_oecd_2016
            location: ('tests/test_parsers.py', 158, 'test_oecd_2016')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_oecd_2016>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_oecd_2016>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_oecd_2016' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_oecd_2016>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_oecd_2016>
        pytest_runtest_makereport [hook]
            item: <Function test_oecd_2016>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert False\n +  where False = <function allclose at 0x7f9b8ca76af0>(nan, 569612.84)\n +    where <function allclose at 0x7f9b8ca76af0> = np.allclose') tblen=27>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_oecd_2016' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_oecd_2016>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert False\n +  where False = <function allclose at 0x7f9b8ca76af0>(nan, 569612.84)\n +    where <function allclose at 0x7f9b8ca76af0> = np.allclose') tblen=1>>
            report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_oecd_2016>
            nextitem: <Function test_oecd_2018>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_oecd_2016>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_oecd_2016' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_oecd_2016
            location: ('tests/test_parsers.py', 158, 'test_oecd_2016')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_oecd_2018>
          nextitem: <Function test_parse_eora26>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_oecd_2018
            location: ('tests/test_parsers.py', 200, 'test_oecd_2018')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_oecd_2018>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_oecd_2018>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_oecd_2018' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_oecd_2018>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_oecd_2018>
        pytest_runtest_makereport [hook]
            item: <Function test_oecd_2018>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert False\n +  where False = <function allclose at 0x7f9b8ca76af0>(nan, 284552.21)\n +    where <function allclose at 0x7f9b8ca76af0> = np.allclose') tblen=27>>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_oecd_2018' when='call' outcome='failed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='call' outcome='failed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='call' outcome='failed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_exception_interact [hook]
            node: <Function test_oecd_2018>
            call: <CallInfo when='call' excinfo=<ExceptionInfo AssertionError('assert False\n +  where False = <function allclose at 0x7f9b8ca76af0>(nan, 284552.21)\n +    where <function allclose at 0x7f9b8ca76af0> = np.allclose') tblen=1>>
            report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='call' outcome='failed'>
        finish pytest_exception_interact --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_oecd_2018>
            nextitem: <Function test_parse_eora26>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_oecd_2018>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_oecd_2018' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_oecd_2018
            location: ('tests/test_parsers.py', 200, 'test_oecd_2018')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_parse_eora26>
          nextitem: <Function test_find_first_number>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_parsers.py::test_parse_eora26
            location: ('tests/test_parsers.py', 227, 'test_parse_eora26')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_parse_eora26>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_eora26>>
          finish pytest_fixture_setup --> <class 'test_parsers.fix_testmrio_calc.<locals>.TestMRIO'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_eora26>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_eora26' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_eora26' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_eora26' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_parse_eora26>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_parse_eora26>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_eora26>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_eora26' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_eora26' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_eora26' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_parse_eora26>
            nextitem: <Function test_find_first_number>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='fix_testmrio_calc' scope='function' baseid='tests/test_parsers.py'>
              request: <SubRequest 'fix_testmrio_calc' for <Function test_parse_eora26>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_parse_eora26>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_parsers.py::test_parse_eora26' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_parsers.py::test_parse_eora26' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_parsers.py::test_parse_eora26' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_parsers.py::test_parse_eora26
            location: ('tests/test_parsers.py', 227, 'test_parse_eora26')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_find_first_number>
          nextitem: <Function test_dev_read>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_util.py::test_find_first_number
            location: ('tests/test_util.py', 81, 'test_find_first_number')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_find_first_number>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find_first_number>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_find_first_number' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_find_first_number' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_find_first_number' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_find_first_number>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_find_first_number>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find_first_number>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_find_first_number' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_find_first_number' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_find_first_number' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_find_first_number>
            nextitem: <Function test_dev_read>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find_first_number>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_find_first_number' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_find_first_number' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_find_first_number' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_util.py::test_find_first_number
            location: ('tests/test_util.py', 81, 'test_find_first_number')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dev_read>
          nextitem: <Function test_build_agg_matrix>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_util.py::test_dev_read
            location: ('tests/test_util.py', 91, 'test_dev_read')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dev_read>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='csv_test_files_content' scope='function' baseid='tests/test_util.py'>
              request: <SubRequest 'csv_test_files_content' for <Function test_dev_read>>
          finish pytest_fixture_setup --> <class 'test_util.csv_test_files_content.<locals>.example_csv_content'> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dev_read>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_dev_read' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_dev_read' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_dev_read' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dev_read>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dev_read>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dev_read>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_dev_read' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_dev_read' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_dev_read' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dev_read>
            nextitem: <Function test_build_agg_matrix>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='csv_test_files_content' scope='function' baseid='tests/test_util.py'>
              request: <SubRequest 'csv_test_files_content' for <Function test_dev_read>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dev_read>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_dev_read' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_dev_read' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_dev_read' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_util.py::test_dev_read
            location: ('tests/test_util.py', 91, 'test_dev_read')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_build_agg_matrix>
          nextitem: <Function test_build_agg_vec>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_util.py::test_build_agg_matrix
            location: ('tests/test_util.py', 104, 'test_build_agg_matrix')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_build_agg_matrix>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_agg_matrix>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_build_agg_matrix' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_build_agg_matrix' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_build_agg_matrix' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_build_agg_matrix>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_build_agg_matrix>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_agg_matrix>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_build_agg_matrix' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_build_agg_matrix' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_build_agg_matrix' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_build_agg_matrix>
            nextitem: <Function test_build_agg_vec>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_agg_matrix>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_build_agg_matrix' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_build_agg_matrix' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_build_agg_matrix' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_util.py::test_build_agg_matrix
            location: ('tests/test_util.py', 104, 'test_build_agg_matrix')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_build_agg_vec>
          nextitem: <Function test_set_block>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_util.py::test_build_agg_vec
            location: ('tests/test_util.py', 118, 'test_build_agg_vec')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_build_agg_vec>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_agg_vec>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_build_agg_vec' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_build_agg_vec' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_build_agg_vec' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_build_agg_vec>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_build_agg_vec>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_agg_vec>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_build_agg_vec' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_build_agg_vec' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_build_agg_vec' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_build_agg_vec>
            nextitem: <Function test_set_block>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_build_agg_vec>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_build_agg_vec' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_build_agg_vec' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_build_agg_vec' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_util.py::test_build_agg_vec
            location: ('tests/test_util.py', 118, 'test_build_agg_vec')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_set_block>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/test_util.py::test_set_block
            location: ('tests/test_util.py', 126, 'test_set_block')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_set_block>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set_block>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_set_block' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_set_block' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_set_block' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_set_block>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_set_block>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set_block>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_set_block' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_set_block' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_set_block' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_set_block>
            nextitem: None
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_reports>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path' scope='function' baseid=''>
              request: <SubRequest 'tmp_path' for <Function test_fileio>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_reports>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='tmp_path_factory' scope='session' baseid=''>
              request: <SubRequest 'tmp_path_factory' for <Function test_fileio>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_set_block>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_util.py::test_set_block' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_util.py::test_set_block' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_util.py::test_set_block' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_util.py::test_set_block
            location: ('tests/test_util.py', 126, 'test_set_block')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session pymrio exitstatus=<ExitCode.TESTS_FAILED: 1> testsfailed=2 testscollected=63>
        exitstatus: ExitCode.TESTS_FAILED
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x7f9b8dbd6c70>
          exitstatus: ExitCode.TESTS_FAILED
          config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
      early skip of rewriting module: pygments.formatters.terminal [assertion]
      early skip of rewriting module: pygments.console [assertion]
      early skip of rewriting module: pygments.lexers.python [assertion]
      early skip of rewriting module: pygments.lexer [assertion]
      early skip of rewriting module: pygments.filter [assertion]
      early skip of rewriting module: pygments.filters [assertion]
      early skip of rewriting module: pygments.regexopt [assertion]
      early skip of rewriting module: pygments.unistring [assertion]
      early skip of rewriting module: pygments.styles.default [assertion]
      early skip of rewriting module: pygments.style [assertion]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2016' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
        pytest_report_teststatus [hook]
            report: <TestReport 'tests/test_parsers.py::test_oecd_2018' when='call' outcome='failed'>
            config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
        finish pytest_report_teststatus --> ('failed', 'F', 'FAILED') [hook]
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x7f9b8e66c2e0>
    finish pytest_unconfigure --> [] [hook]
