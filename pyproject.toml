[build-system]
requires = ["setuptools>=61.0",
            "wheel",
            "build"
            ]
build-backend = "setuptools.build_meta"

[project]
name = "pymrio"
version = "0.6.3dev"
description = "A python module for automating input output calculations and generating reports"
readme = "README.rst"
authors = [
    {name = "Konstantin Stadler", email = "konstantin.stadler@ntnu.no"},
]
requires-python = ">=3.9.0"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering",
    "Topic :: Utilities",
]

dependencies = [
    "pandas >= 2.1",
    "pyarrow >= 11.0",
    "numpy >= 1.20",
    "matplotlib >= 2.0.0",
    "requests >= 2.18",
    "xlrd > 1.1.0",
    "openpyxl >= 3.0.6, < 3.1.1",
    "docutils >= 0.14",
    "faker >= 18.4.0",
]


[project.optional-dependencies]
dev = [
  "pdbpp",
  "country_converter >= 0.8.0",
  "ipython",
  "jupyterlab == 3.*",
  "jupytext",
  "pynvim",
  "sphinx >= 1.6.4",
  "sphinx_rtd_theme >= 0.2.4",
  "ipykernel",
  "nbsphinx",
  "more-itertools",
  "poethepoet",
]
lint = [
  "black >=22.3.0",
  "isort >=5.5.2",
]
test = [
  "coveralls",
  "coverage[toml]",
  "black",
  "pytest >=5.4.3",
  "pytest-black",
  "pytest-cov >=2.7.0",
  "pytest-datadir",
  "pytest-mypy",
  "pytest-xdist[psutil]",
  "faker",
  "pytest-ruff>=0.5",
]


[project.urls]
Homepage = "https://github.com/IndEcol/pymrio"

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-data]
"pymrio" = ["**/*.txt", "**/*.dat", "**/*.doc", "**/*.rst", "**/*.json", "**/*.tsv"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
filterwarnings = [
    "ignore:Using or importing the ABCs from:DeprecationWarning"
]

[tool.coverage.run]
source = ["pymrio"]  
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise NotImplementedError",
    "_load_ini_based_io",
    "if __name__ == .__main__.:"
]
omit = [
    "pymrio/tools/iodownloader.py"
]

[tool.ruff]
target-version = "py39"
line-length = 120
extend-exclude = ["*.ipynb", "doc/source/**/*.py"]


[tool.ruff.lint]
# Default: pycodestyle (E, W) and Pyflakes (F) rules.
extend-select = [
    "B",   # flake8-bugbear: Finds potential bugs and design problems.
    "C",   # flake8-comprehensions: Promotes pythonic list/set/dict comprehensions.
    "W",   # PyCodeStyle warnings
    "E",   # PyCodeStyle errors
    "D",   # pydocstyle: Enforces docstring conventions.
    "F",   # Pyflakes rules
    "I",   # isort: Sorts and organizes imports automatically.
    "UP",  # pyupgrade: Helps upgrade syntax to newer Python versions.
    "PD",  # pandas-vet: Checks for common mistakes in pandas usage.
    "C4",  # Catch incorrect use of comprehensions, dict, list, etc
    "ISC", # String concatenation
    # "RUF",    # Ruff lint
    # "RET", # Good return practices #TODO
    # "SIM", # Common simplification rules #TODO
    # "PTH",      # Use pathlib instead of os.path
    # "TD",       # Be diligent with TODO comments
    # "NPY",      # Some numpy-specific things #TODO
    "TID", # Some good import practices
]
ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "PD013", # pandas: replace stack by melt
    "PD010", # pandas: replace stack by pivot
]
# These codes are ignored by the linter (e.g., flake8, pydocstyle, or pandas-vet)

[tool.ruff.lint.mccabe]
max-complexity = 50

[tool.ruff.lint.pydocstyle]
# Specify the docstring convention to follow. "google" and "numpy" are common in data science.
convention = "numpy"

[tool.ruff.format]
# Sets the style for quotes. Can be "single", "double", or "preserve".
quote-style = "double"

[tool.poe.tasks.sync]
help = "Sync all dependencies"
cmd = "uv sync --all-extras"


[tool.poe.tasks.format]
help = "Format all files"
cmd = "ruff format"

[tool.poe.tasks.check]
help = "Ruff check, accept --fix and all other arguments"
cmd  = "ruff check ${args}"

[tool.poe.tasks.fulltest]
help = "Run the full test suite"
shell  = """
coverage erase
coverage run -m pytest --ruff --ruff-format
coverage report 
"""

[tool.poe.tasks.test]
help = "Fast testing"
cmd  = "pytest -n auto"

[tool.poe.tasks.doc]
help = "Build docs"
shell  = """
make -C ./doc clean
make -C ./doc html
"""

[tool.poe.tasks.build]
help = "Format, test with coverage and build docs"
sequence = ["format", "fulltest", "doc"]

